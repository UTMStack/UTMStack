name: Components Update

on:
  release:
    types: [ 'released' ]
  push:
    branches: [ 'main', 'feature/**' ]
  pull_request_review:
    types: [submitted]

jobs:
  deploy:
    name: Deploy
    runs-on: signing
    outputs:
      env_tag: ${{ steps.deploy.outputs.env_tag }}
      image_based_services: ${{ steps.deploy.outputs.image_based_services }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go 1.x
        uses: actions/setup-go@v5
        with:
          go-version: ^1.20
        id: go

      - name: Deploy to Customer Manager
        id: deploy
        env:
            GITHUB_EVENT_NAME: ${{ github.event_name }}
            GITHUB_REF: ${{ github.ref }}
            GITHUB_REVIEW_STATE: ${{ github.event.review.state }}
            GITHUB_BASE_REF: ${{ github.event.pull_request.base.ref }}
            GITHUB_HEAD_REF: ${{ github.event.pull_request.head.ref }}
            CM_API_DEV: ${{ secrets.CM_API_DEV }}
            CM_API_QA: ${{ secrets.CM_API_QA }}
            CM_API_RC: ${{ secrets.CM_API_RC }}
            CM_API_PROD: ${{ secrets.CM_API_PROD }}
            CM_PUB_AUTH_DEV: ${{ secrets.CM_PUB_AUTH_DEV }}
            CM_PUB_AUTH_QA: ${{ secrets.CM_PUB_AUTH_QA }}
            CM_PUB_AUTH_RC: ${{ secrets.CM_PUB_AUTH_RC }}
            CM_PUB_AUTH_PROD: ${{ secrets.CM_PUB_AUTH_PROD }}
            GITHUB_WORKSPACE: ${{ github.workspace }}
            AGENT_SECRET_PREFIX: ${{ secrets.AGENT_SECRET_PREFIX }}
            SIGN_CERT: ${{ vars.SIGN_CERT }}
            SIGN_KEY: ${{ secrets.SIGN_KEY }}
            SIGN_CONTAINER: ${{ secrets.SIGN_CONTAINER }}

        run: |
          & "C:\Program Files\Python312\python.exe" "$env:GITHUB_WORKSPACE/.github/scripts/deploy.py"
          
  build_images:
    name: Build Docker Images
    needs: 
      - deploy
    if: ${{ needs.deploy.outputs.image_based_services != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJson(needs.deploy.outputs.image_based_services) }}
    uses: ./.github/workflows/used-runner.yml
    with:
      microservice: ${{ matrix.service }}
      environment: ${{ needs.deploy.outputs.env_tag }}
    secrets: inherit
