# CISCO Firepower filter, version 3.0.0
# Based on examples provided and https://www.cisco.com/c/en/us/td/docs/security/firepower/Syslogs/b_fptd_syslog_guide.html
# Filter Input requirements -> Syslog
#
# 1. Parsing the message field containing the Cisco Firepower log
pipeline:
  - dataTypes:
      - firewall-cisco-firepower
    steps:
      # Common Firepower fields
      - grok:
          patterns:
            - fieldName: log.syslogPri
              pattern: '(\<{{.integer}}\>)'
            - fieldName: log.ciscoTime
              pattern: '{{.day}}\s{{.monthName}}\s{{.monthDay}}\s{{.year}}\s{{.time}}'
            - fieldName: local.ip
              pattern: '{{.ipv4}}|{{.ipv6}}|{{.hostname}}'
            - fieldName: log.asaHeader
              pattern: '{{.data}}FTD-'
            - fieldName: log.severity
              pattern: '{{.integer}}'
            - fieldName: log.messageId
              pattern: '-{{.integer}}'
            - fieldName: log.ciscoSeparator
              pattern: '\:{{.space}}'
            - fieldName: log.msg
              pattern: '{{.greedy}}'
          source: raw
      - grok:
          patterns:
            - fieldName: log.ciscoTime
              pattern: '{{.day}}\s{{.monthName}}\s{{.monthDay}}\s{{.year}}\s{{.time}}'
            - fieldName: local.ip
              pattern: '{{.ipv4}}|{{.ipv6}}|{{.hostname}}'
            - fieldName: log.firePowerHeader
              pattern: '{{.data}}FTD-'
            - fieldName: log.severity
              pattern: '{{.integer}}'
            - fieldName: log.messageId
              pattern: '-{{.integer}}'
            - fieldName: log.ciscoSeparator
              pattern: '\:{{.space}}'
            - fieldName: log.msg
              pattern: '{{.greedy}}'
          source: raw
      # Removing unwanted prefixes
      - trim:
          function: prefix
          substring: '-'
          fields:
            - log.messageId
      # Field conversions
      - cast:
          fields:
            - log.messageId
          to: int
      # Begining specific message parsing
      #......................................................................#
      # FTD-2-106001
      - grok:
          patterns:
            - fieldName: log.direction
              pattern: '{{.word}}'
            - fieldName: protocol
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: 'connection'
            - fieldName: actionResult
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: 'from'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}})'
            - fieldName: from.port
              pattern: '/{{.integer}}'
            - fieldName: log.irrelevant
              pattern: 'to'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}})'
            - fieldName: to.port
              pattern: '/{{.integer}}'
            - fieldName: log.irrelevant
              pattern: 'flags'
            - fieldName: log.flags
              pattern: '{{.data}}\s'
            - fieldName: log.irrelevant
              pattern: 'on\sinterface'
            - fieldName: log.srcInterface
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106001

      - trim:
          function: prefix
          substring: '/'
          fields:
            - from.port
            - to.port
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106001
      #......................................................................#
      # FTD-2-106017
      - grok:
          patterns:
            - fieldName: actionResult
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: 'IP\sdue\sto'
            - fieldName: action
              pattern: '{{.greedy}}from'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}})'
            - fieldName: log.irrelevant
              pattern: 'to'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}})'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106017
      - trim:
          function: suffix
          substring: 'from'
          fields:
            - action
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106017
      #......................................................................#
      # FTD-1-106021
      - grok:
          patterns:
            - fieldName: actionResult
              pattern: '{{.word}}'
            - fieldName: action
              pattern: '{{.greedy}}from'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}})'
            - fieldName: log.irrelevant
              pattern: 'to'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}})'
            - fieldName: log.irrelevant
              pattern: 'on\sinterface'
            - fieldName: log.srcInterface
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106021
      - trim:
          function: suffix
          substring: 'from'
          fields:
            - action
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106021
      #......................................................................#
      # FTD-2-106101
      - grok:
          patterns:
            - fieldName: action
              pattern: 'Number of cached deny-flows for ACL log has reached limit'
            - fieldName: log.rest
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106101
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Number of cached'
            - fieldName: actionResult
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: action
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106101
      # Parsing the limit number
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.numFlows
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.rest
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106101
      # Field conversions
      - cast:
          fields:
            - log.numFlows
          to: int
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106101
      #......................................................................#
      # FTD-6-106102,FTD-4-106103
      # First variant
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'access-list'
            - fieldName: log.accessList
              pattern: '{{.data}}\s'
            - fieldName: action
              pattern: '{{.word}}'
            - fieldName: protocol
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: 'for user'
            - fieldName: from.user
              pattern: '(''{{.data}}''|{{.data}})\s'
            - fieldName: log.srcInterface
              pattern: '{{.data}}/'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}})'
            - fieldName: from.port
              pattern: '{{.integer}}'
            - fieldName: log.dstInterface
              pattern: '{{.data}}/'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}})'
            - fieldName: to.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: 'hit-cnt'
            - fieldName: log.hitCount
              pattern: '{{.integer}}'
            - fieldName: log.rest
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106102 || msgId==106103
      # Second variant
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'access-list'
            - fieldName: log.accessList
              pattern: '{{.data}}\s'
            - fieldName: action
              pattern: '{{.word}}'
            - fieldName: protocol
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: 'for user'
            - fieldName: from.user
              pattern: '(''{{.data}}''|{{.data}})\s'
            - fieldName: log.srcInterface
              pattern: '{{.data}}/'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}})'
            - fieldName: from.port
              pattern: '\({{.data}}\)'
            - fieldName: log.irrelevant
              pattern: '-\>'
            - fieldName: log.dstInterface
              pattern: '{{.data}}/'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}})'
            - fieldName: to.port
              pattern: '\({{.data}}\)'
            - fieldName: log.irrelevant
              pattern: 'hit-cnt'
            - fieldName: log.hitCount
              pattern: '{{.integer}}'
            - fieldName: log.rest
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106102 || msgId==106103
      - trim:
          function: suffix
          substring: '/'
          fields:
            - log.srcInterface
            - log.dstInterface
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106102 || msgId==106103
      - trim:
          function: prefix
          substring: ''''
          fields:
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106102 || msgId==106103
      - trim:
          function: suffix
          substring: ''''
          fields:
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106102 || msgId==106103
      - trim:
          function: prefix
          substring: '('
          fields:
            - from.port
            - to.port
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106102 || msgId==106103
      - trim:
          function: suffix
          substring: ')'
          fields:
            - from.port
            - to.port
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106102 || msgId==106103
      #......................................................................#
      # FTD-6-109101
      - grok:
          patterns:
            - fieldName: action
              pattern: 'Received CoA disconnect request'
            - fieldName: log.irrelevant
              pattern: 'from'
            - fieldName: from.ip
              pattern: '{{.ipv4}}|{{.ipv6}}|{{.hostname}}'
            - fieldName: log.irrelevant
              pattern: 'for user'
            - fieldName: from.user
              pattern: '(''{{.data}}''|{{.data}}),'
            - fieldName: log.irrelevant
              pattern: 'with\saudit-session-id:'
            - fieldName: log.auditSessionId
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==109101
      # Action result
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Received CoA'
            - fieldName: actionResult
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: action
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==109101
      - trim:
          function: suffix
          substring: ','
          fields:
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==109101
      #......................................................................#
      # FTD-4-109102
      - grok:
          patterns:
            - fieldName: action
              pattern: 'Received CoA {{.word}}'
            - fieldName: log.irrelevant
              pattern: 'from'
            - fieldName: from.ip
              pattern: '{{.ipv4}}|{{.ipv6}}|{{.hostname}}'
            - fieldName: log.irrelevant
              pattern: ', but cannot find named session'
            - fieldName: log.auditSessionId
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==109102
      # Action result
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Received CoA'
            - fieldName: actionResult
              pattern: '{{.greedy}}'
          source: action
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==109102
      #......................................................................#
      # FTD-3-109103
      - grok:
          patterns:
            - fieldName: action
              pattern: 'CoA {{.word}}'
            - fieldName: log.irrelevant
              pattern: 'from'
            - fieldName: from.ip
              pattern: '{{.ipv4}}|{{.ipv6}}|{{.hostname}}'
            - fieldName: log.irrelevant
              pattern: 'failed for user'
            - fieldName: from.user
              pattern: '(''{{.data}}''|{{.data}}),'
            - fieldName: log.irrelevant
              pattern: 'with session ID:'
            - fieldName: log.auditSessionId
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==109103
      # Action result
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'CoA'
            - fieldName: actionResult
              pattern: '{{.greedy}}'
          source: action
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==109103
      - trim:
          function: suffix
          substring: ','
          fields:
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==109103
      #......................................................................#
      # FTD-109201 to 109213
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'UAUTH(:)? Session(\s|=)'
            - fieldName: log.session
              pattern: '{{.data}},'
            - fieldName: log.irrelevant
              pattern: 'User(\s|=)'
            - fieldName: from.user
              pattern: '{{.data}},'
            - fieldName: log.irrelevant
              pattern: 'Assigned IP(\s|=)'
            - fieldName: from.ip
              pattern: '{{.ipv4}}|{{.ipv6}}|{{.hostname}}'
            - fieldName: log.irrelevant
              pattern: ','
            - fieldName: action
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId>=109201 && msgId<=109213
      - trim:
          function: suffix
          substring: ','
          fields:
            - log.session
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId>=109201 && msgId<=109213
      #......................................................................#
      # FTD-6-113004
      - grok:
          patterns:
            - fieldName: action
              pattern: 'AAA user {{.word}} Successful'
            - fieldName: log.irrelevant
              pattern: '\:'
            - fieldName: log.irrelevant
              pattern: 'server(\s)?=(\s)?'
            - fieldName: to.ip
              pattern: '{{.data}}(\:|,)'
            - fieldName: log.irrelevant
              pattern: '(U|u)ser(\s)?=(\s)?'
            - fieldName: from.user
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113004
      # Action result
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'AAA user {{.word}}'
            - fieldName: actionResult
              pattern: '{{.greedy}}'
          source: action
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113004
      - trim:
          function: suffix
          substring: ':'
          fields:
            - to.ip
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113004
      - trim:
          function: suffix
          substring: ','
          fields:
            - to.ip
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113004
      #......................................................................#
      # Decoding severity
      - add:
          function: 'string'
          params:
            key: log.severityLabel
            value: 'Alert'
          where:
            variables:
              - get: log.severity
                as: sev
                ofType: string
            expression: sev=="1"
      - add:
          function: 'string'
          params:
            key: log.severityLabel
            value: 'Critical'
          where:
            variables:
              - get: log.severity
                as: sev
                ofType: string
            expression: sev=="2"
      - add:
          function: 'string'
          params:
            key: log.severityLabel
            value: 'Error'
          where:
            variables:
              - get: log.severity
                as: sev
                ofType: string
            expression: sev=="3"
      - add:
          function: 'string'
          params:
            key: log.severityLabel
            value: 'Warning'
          where:
            variables:
              - get: log.severity
                as: sev
                ofType: string
            expression: sev=="4"
      - add:
          function: 'string'
          params:
            key: log.severityLabel
            value: 'Notification'
          where:
            variables:
              - get: log.severity
                as: sev
                ofType: string
            expression: sev=="5"
      - add:
          function: 'string'
          params:
            key: log.severityLabel
            value: 'Informational'
          where:
            variables:
              - get: log.severity
                as: sev
                ofType: string
            expression: sev=="6"
      - add:
          function: 'string'
          params:
            key: log.severityLabel
            value: 'Debugging'
          where:
            variables:
              - get: log.severity
                as: sev
                ofType: string
            expression: sev=="7"
      #......................................................................#
      # Common field conversions
      - cast:
          fields:
            - from.port
            - to.port
          to: int
      # Removing unused fields
      - delete:
          fields:
            - log.firePowerHeader
            - log.ciscoSeparator
            - log.irrelevant
            - log.syslogPri
            - log.rest
