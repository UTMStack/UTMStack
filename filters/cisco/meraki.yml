# CISCO Meraki filter, version 3.0.0
# Based on https://documentation.meraki.com/General_Administration/Monitoring_and_Reporting/Syslog_Event_Types_and_Log_Samples
# https://documentation.cysiv.com/articles/#!data-source-onboarding-device-configuration-reference/cisco-meraki-reference-information-and-cim-mapping
#
# Filter Input requirements -> Syslog
#
# 1. Parsing the message field
pipeline:
  - dataTypes:
      - firewall-meraki
    steps:
      # Header fields
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '(\<{{.integer}}\>)'
            - fieldName: log.ciscoTime
              pattern: '{{.monthName}}\s{{.monthDay}}\s{{.year}}\s{{.time}}'
            - fieldName: log.serverIp
              pattern: '{{.ipv4}}|{{.ipv6}}|{{.hostname}}(\s)?\:'
            - fieldName: log.msg
              pattern: '{{.greedy}}'
          source: raw
      - grok:
          patterns:
            - fieldName: log.ciscoTime
              pattern: '{{.monthName}}\s{{.monthDay}}\s{{.year}}\s{{.time}}'
            - fieldName: log.serverIp
              pattern: '{{.ipv4}}|{{.ipv6}}|{{.hostname}}(\s)?\:'
            - fieldName: log.msg
              pattern: '{{.greedy}}'
          source: raw
      # Adding control flag field (Used to know if the message don't contains the header INT.INT mx_type mx_group)
      - add:
          function: 'string'
          params:
            key: log.controlFlag
            value: 'Init'
      # Begin message parsing
      # First extract the generic message, then parse it
      - grok:
          patterns:
            - fieldName: log.controlFlag
              pattern: '{{.data}}(events|flows|urls|ids-alerts|security_event)'
            - fieldName: log.genericEvent
              pattern: '{{.greedy}}'
          source: log.msg
      # Parsing variant INT.INT mx_type mx_group
      # Parsing from controlFlag (Format: Date? IP PORT INT.INT mx_type mx_group)
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '{{.data}}{{.time}}'
            - fieldName: log.local.ip
              pattern: '{{.ipv4}}|{{.ipv6}}|{{.hostname}}'
            - fieldName: log.local.port
              pattern: '{{.integer}}'
            - fieldName: log.msgEventTime
              pattern: '{{.integer}}\.{{.integer}}'
            - fieldName: log.merakiType
              pattern: '{{.data}}\s'
            - fieldName: log.merakiGroup
              pattern: '{{.greedy}}'
          source: log.controlFlag
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
            expression: flag!="Init"
      - grok:
          patterns:
            - fieldName: log.msgEventTime
              pattern: '{{.integer}}\.{{.integer}}'
            - fieldName: log.merakiType
              pattern: '{{.data}}\s'
            - fieldName: log.merakiGroup
              pattern: '{{.greedy}}'
          source: log.controlFlag
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
            expression: flag!="Init"
      # ........................................
      # event vpn connectivity change
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'type(\s)?='
            - fieldName: action
              pattern: '{{.data}}\s'
            - fieldName: log.irrelevant
              pattern: 'vpn_type(\s)?='
            - fieldName: log.vpnType
              pattern: '''{{.data}}'''
            - fieldName: log.irrelevant
              pattern: 'peer_contact(\s)?='
            - fieldName: origin.ip
              pattern: '''{{.data}}\:'
            - fieldName: origin.port
              pattern: '{{.integer}}'''
            - fieldName: log.irrelevant
              pattern: 'peer_ident(\s)?='
            - fieldName: log.peerIdent
              pattern: '''{{.data}}'''
            - fieldName: log.irrelevant
              pattern: 'connectivity(\s)?='
            - fieldName: log.connectivity
              pattern: '{{.greedy}}'
          source: log.genericEvent
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
            expression: flag!="Init"
      # ........................................
      # event uplink connectivity change
      - rename:
          from:
            - log.genericEvent
          to: action
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
            expression: flag!="Init" && gevt.contains("failover to")
      # ........................................
      # event uplink connectivity change
      # Event: urls, HTTP GET requests in MR Access Points
      - rename:
          from:
            - log.genericEvent
          to: action
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
            expression: flag!="Init" && gevt.contains("Cellular connection")
      - grok:
          patterns:
            - fieldName: action
              pattern: 'Cellular connection'
            - fieldName: log.connectionState
              pattern: '(up|Up|down|Down)'
            - fieldName: log.msgEventTime
              pattern: '{{.integer}}\.{{.integer}}'
            - fieldName: log.merakiTypeIn
              pattern: '{{.data}}\s'
            - fieldName: log.merakiGroupIn
              pattern: '(events|flows|urls|ids-alerts|security_event)'
            - fieldName: log.irrelevant
              pattern: 'src(\s)?='
            - fieldName: origin.ip
              pattern: '{{.data}}\:'
            - fieldName: origin.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: 'dst(\s)?='
            - fieldName: target.ip
              pattern: '{{.data}}\:'
            - fieldName: target.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: 'mac(\s)?='
            - fieldName: origin.mac
              pattern: '{{.data}}(\s)'
            - fieldName: log.irrelevant
              pattern: 'request(\s)?\:'
            - fieldName: log.method
              pattern: '{{.word}}'
            - fieldName: target.url
              pattern: '{{.greedy}}'
          source: action
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: action
                as: act
                ofType: string
            expression: flag!="Init" && act.contains("Cellular connection")
      - grok:
          patterns:
            - fieldName: action
              pattern: 'Cellular connection'
            - fieldName: log.connectionState
              pattern: '(up|Up|down|Down)'
          source: action
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: action
                as: act
                ofType: string
            expression: flag!="Init" && act.contains("Cellular connection")
      # ........................................
      # Event: event, dhcp no offers
      - grok:
          patterns:
            - fieldName: action
              pattern: '{{.data}}for\smac'
            - fieldName: origin.mac
              pattern: '{{.data}}\s'
            - fieldName: log.irrelevant
              pattern: 'host(\s)?='
            - fieldName: origin.ip
              pattern: '{{.greedy}}'
          source: log.genericEvent
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
            expression: flag!="Init" && gevt.contains("dhcp no offers")
      - trim:
          function: suffix
          substring: 'for mac'
          fields:
            - action
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
            expression: flag!="Init" && gevt.contains("dhcp no offers")
      # ........................................
      # Event: event, dhcp lease
      - grok:
          patterns:
            - fieldName: action
              pattern: '{{.data}}of\sip'
            - fieldName: origin.ip
              pattern: '{{.ipv4}}|{{.ipv6}}|{{.hostname}}'
            - fieldName: log.irrelevant
              pattern: 'from server mac'
            - fieldName: log.serverMac
              pattern: '{{.data}}\s'
            - fieldName: log.irrelevant
              pattern: 'for client mac'
            - fieldName: origin.mac
              pattern: '{{.data}}\s'
            - fieldName: log.irrelevant
              pattern: 'from router'
            - fieldName: log.routerIp
              pattern: '{{.ipv4}}|{{.ipv6}}|{{.hostname}}'
            - fieldName: log.irrelevant
              pattern: 'on subnet'
            - fieldName: log.subnet
              pattern: '{{.ipv4}}|{{.ipv6}}|{{.hostname}}'
            - fieldName: log.irrelevant
              pattern: 'with dns'
            - fieldName: log.dns
              pattern: '{{.ipv4}}|{{.ipv6}}|{{.hostname}}'
            - fieldName: log.irrelevant
              pattern: ','
            - fieldName: log.dns1
              pattern: '{{.greedy}}'
          source: log.genericEvent
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
            expression: flag!="Init" && gevt.contains("dhcp lease")
      - trim:
          function: suffix
          substring: 'of ip'
          fields:
            - action
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
            expression: flag!="Init" && gevt.contains("dhcp lease")
      # ........................................
      # Event: event, HTTP GET requests in Meraki MX Security Appliance
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'src(\s)?='
            - fieldName: origin.ip
              pattern: '{{.data}}\:'
            - fieldName: origin.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: 'dst(\s)?='
            - fieldName: target.ip
              pattern: '{{.data}}\:'
            - fieldName: target.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: 'mac(\s)?='
            - fieldName: origin.mac
              pattern: '{{.data}}(\s)'
            - fieldName: log.irrelevant
              pattern: 'request(\s)?\:'
            - fieldName: log.method
              pattern: '{{.word}}'
            - fieldName: target.url
              pattern: '{{.greedy}}'
          source: log.genericEvent
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("src") && gp=="urls"
      # ........................................
      # Event: flows, IP session initiated in Meraki MX Security Appliance
      # First variant
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'src(\s)?='
            - fieldName: origin.ip
              pattern: '{{.ipv4}}|{{.ipv6}}|{{.hostname}}'
            - fieldName: log.irrelevant
              pattern: 'dst(\s)?='
            - fieldName: target.ip
              pattern: '{{.ipv4}}|{{.ipv6}}|{{.hostname}}'
            - fieldName: log.irrelevant
              pattern: 'mac(\s)?='
            - fieldName: origin.mac
              pattern: '{{.data}}(\s)'
            - fieldName: log.irrelevant
              pattern: 'protocol(\s)?='
            - fieldName: protocol
              pattern: '{{.data}}(\s)'
            - fieldName: log.irrelevant
              pattern: 'sport(\s)?='
            - fieldName: origin.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: 'dport(\s)?='
            - fieldName: target.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: 'pattern(\s)?\:'
            - fieldName: log.pattern
              pattern: '{{.greedy}}'
          source: log.genericEvent
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("src") && gp=="flows"
      # Second variant
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'src(\s)?='
            - fieldName: origin.ip
              pattern: '{{.ipv4}}|{{.ipv6}}|{{.hostname}}'
            - fieldName: log.irrelevant
              pattern: 'dst(\s)?='
            - fieldName: target.ip
              pattern: '{{.ipv4}}|{{.ipv6}}|{{.hostname}}'
            - fieldName: log.irrelevant
              pattern: 'protocol(\s)?='
            - fieldName: protocol
              pattern: '{{.data}}(\s)'
            - fieldName: log.irrelevant
              pattern: 'sport(\s)?='
            - fieldName: origin.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: 'dport(\s)?='
            - fieldName: target.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: 'pattern(\s)?\:'
            - fieldName: log.pattern
              pattern: '{{.greedy}}'
          source: log.genericEvent
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("src") && gp=="flows"
      # ........................................
      # Event: ids-alerts, ids signature matched in Meraki MX Security Appliance
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'signature(\s)?='
            - fieldName: log.signature
              pattern: '{{.data}}priority'
            - fieldName: log.irrelevant
              pattern: '{{.data}}='
            - fieldName: log.priority
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: 'timestamp(\s)?='
            - fieldName: log.msgEventTimeIn
              pattern: '{{.integer}}\.{{.integer}}'
            - fieldName: log.irrelevant
              pattern: 'direction(\s)?='
            - fieldName: log.direction
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: 'protocol(\s)?='
            - fieldName: protocol
              pattern: '{{.data}}(\s)'
            - fieldName: log.irrelevant
              pattern: 'src(\s)?='
            - fieldName: origin.ip
              pattern: '{{.data}}\:'
            - fieldName: origin.port
              pattern: '{{.integer}}'
          source: log.genericEvent
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("signature") && gp=="ids-alerts"
      - trim:
          function: suffix
          substring: 'priority'
          fields:
            - log.signature
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("signature") && gp=="ids-alerts"
      # ........................................
      # Event: event IPsec-SA request queued due to no phase 1 found, phase2 negotiation failed, initiate new phase 1 negotiation, 
      # ISAKMP-SA established, initiate new phase 2 negotiation, IPsec-SA established, ISAKMP-SA established, and ISAKMP-SA deleted 
      # in Meraki MX Security Appliance
      # This type of message mx_type=labs_appliance mx_group=events
      # First variant
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Site-to-site VPN(\s)?\:(\s)?{{.greedy}}(\s)(deleted|established)'
            - fieldName: origin.ip
              pattern: '{{.ipv4}}|{{.ipv6}}|{{.hostname}}'
            - fieldName: origin.port
              pattern: '\[(\s)?{{.integer}}(\s)?\]'
            - fieldName: log.irrelevant
              pattern: '-'
            - fieldName: target.ip
              pattern: '{{.ipv4}}|{{.ipv6}}|{{.hostname}}'
            - fieldName: target.port
              pattern: '\[(\s)?{{.integer}}(\s)?\]'
            - fieldName: log.irrelevant
              pattern: 'spi(\s)?\:'
            - fieldName: log.spi
              pattern: '{{.greedy}}'
          source: log.genericEvent
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("Site") && gp=="events"
      # Second variant
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Site-to-site VPN(\s)?\:(\s)?{{.greedy}}(\s)request(\s)for'
            - fieldName: origin.ip
              pattern: '{{.ipv4}}|{{.ipv6}}|{{.hostname}}'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.genericEvent
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("Site") && gp=="events"
      # Third variant
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Site-to-site VPN(\s)?\:(\s)?{{.greedy}}(\s)negotiation(\s)failed'
            - fieldName: log.irrelevant
              pattern: '{{.data}}ESP'
            - fieldName: origin.ip
              pattern: '{{.ipv4}}|{{.ipv6}}|{{.hostname}}'
            - fieldName: origin.port
              pattern: '\[(\s)?{{.integer}}(\s)?\]'
            - fieldName: log.irrelevant
              pattern: '-\>'
            - fieldName: target.ip
              pattern: '{{.ipv4}}|{{.ipv6}}|{{.hostname}}'
            - fieldName: target.port
              pattern: '\[(\s)?{{.integer}}(\s)?\]'
          source: log.genericEvent
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("Site") && gp=="events"
      # Fourth variant
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Site-to-site VPN(\s)?\:(\s)?{{.greedy}}(\s)negotiation(\s)?\:'
            - fieldName: origin.ip
              pattern: '{{.ipv4}}|{{.ipv6}}|{{.hostname}}'
            - fieldName: origin.port
              pattern: '\[(\s)?{{.integer}}(\s)?\]'
            - fieldName: log.irrelevant
              pattern: '\<=\>'
            - fieldName: target.ip
              pattern: '{{.ipv4}}|{{.ipv6}}|{{.hostname}}'
            - fieldName: target.port
              pattern: '\[(\s)?{{.integer}}(\s)?\]'
          source: log.genericEvent
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("Site") && gp=="events"
      # Fifth variant
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Site-to-site VPN(\s)?\:(\s)?{{.greedy}}(\s)established\:(\s)?ESP/Tunnel'
            - fieldName: origin.ip
              pattern: '{{.ipv4}}|{{.ipv6}}|{{.hostname}}'
            - fieldName: origin.port
              pattern: '\[(\s)?{{.integer}}(\s)?\]'
            - fieldName: log.irrelevant
              pattern: '-\>'
            - fieldName: target.ip
              pattern: '{{.ipv4}}|{{.ipv6}}|{{.hostname}}'
            - fieldName: target.port
              pattern: '\[(\s)?{{.integer}}(\s)?\]'
            - fieldName: log.irrelevant
              pattern: 'spi(\s)?='
            - fieldName: log.spi
              pattern: '{{.greedy}}'
          source: log.genericEvent
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("Site") && gp=="events"
      - trim:
          function: prefix
          substring: '['
          fields:
            - origin.port
            - target.port
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("Site") && gp=="events"
      - trim:
          function: suffix
          substring: ']'
          fields:
            - origin.port
            - target.port
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("Site") && gp=="events"
      # ........................................
      # Event: event spanning-tree guard state change in Meraki MS Switches
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Port'
            - fieldName: origin.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: 'received an'
            - fieldName: protocol
              pattern: '{{.data}}BPDU'
            - fieldName: log.irrelevant
              pattern: 'from'
            - fieldName: origin.mac
              pattern: '{{.data}}so'
            - fieldName: log.irrelevant
              pattern: 'the port was'
            - fieldName: action
              pattern: '{{.greedy}}'
          source: log.genericEvent
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("Port") && gp=="events"
      - trim:
          function: suffix
          substring: 'BPDU'
          fields:
            - protocol
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("Port") && gp=="events"
      - trim:
          function: suffix
          substring: 'so'
          fields:
            - origin.mac
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("Port") && gp=="events"
      # ........................................
      # Event: event blocked DHCP server response in Meraki MS Switches
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Blocked'
            - fieldName: protocol
              pattern: '{{.data}}server'
            - fieldName: log.irrelevant
              pattern: 'response from'
            - fieldName: origin.mac
              pattern: '{{.data}}on'
            - fieldName: log.irrelevant
              pattern: 'VLAN'
            - fieldName: log.vlan
              pattern: '{{.greedy}}'
          source: log.genericEvent
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("Blocked") && gp=="events"
      - trim:
          function: suffix
          substring: 'server'
          fields:
            - protocol
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("Blocked") && gp=="events"
      - trim:
          function: suffix
          substring: 'on'
          fields:
            - origin.mac
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("Blocked") && gp=="events"
      # ........................................
      # Event: event 802.1X (all events) in Meraki MS Switches
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'type(\s)?='
            - fieldName: action
              pattern: '{{.data}}port'
            - fieldName: log.irrelevant
              pattern: '='
            - fieldName: origin.port
              pattern: '{{.data}}identity'
            - fieldName: log.irrelevant
              pattern: '='
            - fieldName: log.identity
              pattern: '{{.greedy}}'
          source: log.genericEvent
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("type") && gp=="events" && gevt.contains("identity") && gevt.contains("port")
      - trim:
          function: suffix
          substring: 'port'
          fields:
            - action
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("type") && gp=="events" && gevt.contains("identity") && gevt.contains("port")
      - trim:
          function: prefix
          substring: ''''
          fields:
            - origin.port
            - log.identity
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("type") && gp=="events" && gevt.contains("identity") && gevt.contains("port")
      - trim:
          function: suffix
          substring: ''''
          fields:
            - origin.port
            - log.identity
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("type") && gp=="events" && gevt.contains("identity") && gevt.contains("port")
      # ........................................
      # Event: event 802.11 disassociation in Meraki MR Access Points
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'type(\s)?='
            - fieldName: action
              pattern: '{{.data}}radio'
            - fieldName: log.irrelevant
              pattern: '='
            - fieldName: log.radio
              pattern: '{{.data}}vap'
            - fieldName: log.irrelevant
              pattern: '='
            - fieldName: log.vap
              pattern: '{{.data}}channel'
            - fieldName: log.irrelevant
              pattern: '='
            - fieldName: log.channel
              pattern: '{{.data}}reason'
            - fieldName: log.irrelevant
              pattern: '='
            - fieldName: log.reason
              pattern: '{{.data}}instigator'
            - fieldName: log.irrelevant
              pattern: '='
            - fieldName: log.instigator
              pattern: '{{.data}}duration'
            - fieldName: log.irrelevant
              pattern: '='
            - fieldName: log.duration
              pattern: '{{.data}}auth_neg_dur'
            - fieldName: log.irrelevant
              pattern: '='
            - fieldName: log.authNegDur
              pattern: '{{.data}}last_auth_ago'
            - fieldName: log.irrelevant
              pattern: '='
            - fieldName: log.lastAuthAgo
              pattern: '{{.data}}is_wpa'
            - fieldName: log.irrelevant
              pattern: '='
            - fieldName: log.isWpa
              pattern: '{{.data}}full_conn'
            - fieldName: log.irrelevant
              pattern: '='
            - fieldName: log.fullConn
              pattern: '{{.data}}ip_resp'
            - fieldName: log.irrelevant
              pattern: '='
            - fieldName: log.ipResp
              pattern: '{{.data}}ip_src'
            - fieldName: log.irrelevant
              pattern: '='
            - fieldName: origin.ip
              pattern: '{{.data}}arp_resp'
            - fieldName: log.irrelevant
              pattern: '='
            - fieldName: log.arpResp
              pattern: '{{.data}}arp_src'
            - fieldName: log.irrelevant
              pattern: '='
            - fieldName: log.arpSrc
              pattern: '{{.data}}dns_server'
            - fieldName: log.irrelevant
              pattern: '='
            - fieldName: log.dnsServer
              pattern: '{{.data}}dns_req_rtt'
            - fieldName: log.irrelevant
              pattern: '='
            - fieldName: log.dnsReqRtt
              pattern: '{{.data}}dns_resp'
            - fieldName: log.irrelevant
              pattern: '='
            - fieldName: log.dnsResp
              pattern: '{{.data}}aid'
            - fieldName: log.irrelevant
              pattern: '='
            - fieldName: log.aid
              pattern: '{{.greedy}}'
          source: log.genericEvent
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("type") && gp=="events" && gevt.contains("radio") && gevt.contains("channel") && gevt.contains("auth_neg_dur") && gevt.contains("last_auth_ago")
      - trim:
          function: suffix
          substring: 'radio'
          fields:
            - action
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("type") && gp=="events" && gevt.contains("radio") && gevt.contains("channel") && gevt.contains("auth_neg_dur") && gevt.contains("last_auth_ago")
      - trim:
          function: suffix
          substring: 'vap'
          fields:
            - log.radio
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("type") && gp=="events" && gevt.contains("radio") && gevt.contains("channel") && gevt.contains("auth_neg_dur") && gevt.contains("last_auth_ago")
      - trim:
          function: suffix
          substring: 'channel'
          fields:
            - log.vap
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("type") && gp=="events" && gevt.contains("radio") && gevt.contains("channel") && gevt.contains("auth_neg_dur") && gevt.contains("last_auth_ago")
      - trim:
          function: suffix
          substring: 'reason'
          fields:
            - log.channel
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("type") && gp=="events" && gevt.contains("radio") && gevt.contains("channel") && gevt.contains("auth_neg_dur") && gevt.contains("last_auth_ago")
      - trim:
          function: suffix
          substring: 'instigator'
          fields:
            - log.reason
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("type") && gp=="events" && gevt.contains("radio") && gevt.contains("channel") && gevt.contains("auth_neg_dur") && gevt.contains("last_auth_ago")
      - trim:
          function: suffix
          substring: 'duration'
          fields:
            - log.instigator
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("type") && gp=="events" && gevt.contains("radio") && gevt.contains("channel") && gevt.contains("auth_neg_dur") && gevt.contains("last_auth_ago")
      - trim:
          function: suffix
          substring: 'auth_neg_dur'
          fields:
            - log.duration
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("type") && gp=="events" && gevt.contains("radio") && gevt.contains("channel") && gevt.contains("auth_neg_dur") && gevt.contains("last_auth_ago")
      - trim:
          function: suffix
          substring: 'last_auth_ago'
          fields:
            - log.authNegDur
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("type") && gp=="events" && gevt.contains("radio") && gevt.contains("channel") && gevt.contains("auth_neg_dur") && gevt.contains("last_auth_ago")
      - trim:
          function: suffix
          substring: 'is_wpa'
          fields:
            - log.lastAuthAgo
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("type") && gp=="events" && gevt.contains("radio") && gevt.contains("channel") && gevt.contains("auth_neg_dur") && gevt.contains("last_auth_ago")
      - trim:
          function: suffix
          substring: 'full_conn'
          fields:
            - log.isWpa
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("type") && gp=="events" && gevt.contains("radio") && gevt.contains("channel") && gevt.contains("auth_neg_dur") && gevt.contains("last_auth_ago")
      - trim:
          function: suffix
          substring: 'ip_resp'
          fields:
            - log.fullConn
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("type") && gp=="events" && gevt.contains("radio") && gevt.contains("channel") && gevt.contains("auth_neg_dur") && gevt.contains("last_auth_ago")
      - trim:
          function: suffix
          substring: 'ip_src'
          fields:
            - log.ipResp
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("type") && gp=="events" && gevt.contains("radio") && gevt.contains("channel") && gevt.contains("auth_neg_dur") && gevt.contains("last_auth_ago")
      - trim:
          function: suffix
          substring: 'arp_resp'
          fields:
            - origin.ip
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("type") && gp=="events" && gevt.contains("radio") && gevt.contains("channel") && gevt.contains("auth_neg_dur") && gevt.contains("last_auth_ago")
      - trim:
          function: suffix
          substring: 'arp_src'
          fields:
            - log.arpResp
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("type") && gp=="events" && gevt.contains("radio") && gevt.contains("channel") && gevt.contains("auth_neg_dur") && gevt.contains("last_auth_ago")
      - trim:
          function: suffix
          substring: 'dns_server'
          fields:
            - log.arpSrc
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("type") && gp=="events" && gevt.contains("radio") && gevt.contains("channel") && gevt.contains("auth_neg_dur") && gevt.contains("last_auth_ago")
      - trim:
          function: suffix
          substring: 'dns_req_rtt'
          fields:
            - log.dnsServer
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("type") && gp=="events" && gevt.contains("radio") && gevt.contains("channel") && gevt.contains("auth_neg_dur") && gevt.contains("last_auth_ago")
      - trim:
          function: suffix
          substring: 'dns_resp'
          fields:
            - log.dnsReqRtt
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("type") && gp=="events" && gevt.contains("radio") && gevt.contains("channel") && gevt.contains("auth_neg_dur") && gevt.contains("last_auth_ago")
      - trim:
          function: suffix
          substring: 'aid'
          fields:
            - log.dnsResp
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("type") && gp=="events" && gevt.contains("radio") && gevt.contains("channel") && gevt.contains("auth_neg_dur") && gevt.contains("last_auth_ago")
      - trim:
          function: prefix
          substring: ''''
          fields:
            - log.radio
            - log.vap
            - log.channel
            - log.reason
            - log.instigator
            - log.duration
            - log.authNegDur
            - log.lastAuthAgo
            - log.isWpa
            - log.fullConn
            - log.ipResp
            - origin.ip
            - log.arpResp
            - log.arpSrc
            - log.dnsServer
            - log.dnsReqRtt
            - log.dnsResp
            - log.aid
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("type") && gp=="events" && gevt.contains("radio") && gevt.contains("channel") && gevt.contains("auth_neg_dur") && gevt.contains("last_auth_ago")
      - trim:
          function: suffix
          substring: ''''
          fields:
            - log.radio
            - log.vap
            - log.channel
            - log.reason
            - log.instigator
            - log.duration
            - log.authNegDur
            - log.lastAuthAgo
            - log.isWpa
            - log.fullConn
            - log.ipResp
            - origin.ip
            - log.arpResp
            - log.arpSrc
            - log.dnsServer
            - log.dnsReqRtt
            - log.dnsResp
            - log.aid
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("type") && gp=="events" && gevt.contains("radio") && gevt.contains("channel") && gevt.contains("auth_neg_dur") && gevt.contains("last_auth_ago")
      # ........................................
      # Event: event 802.1X (all events) in Meraki MR Access Points
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'type(\s)?='
            - fieldName: action
              pattern: '{{.data}}radio'
            - fieldName: log.irrelevant
              pattern: '='
            - fieldName: log.radio
              pattern: '{{.data}}vap'
            - fieldName: log.irrelevant
              pattern: '='
            - fieldName: log.vap
              pattern: '{{.data}}identity'
            - fieldName: log.irrelevant
              pattern: '='
            - fieldName: log.identity
              pattern: '{{.data}}aid'
            - fieldName: log.irrelevant
              pattern: '='
            - fieldName: log.aid
              pattern: '{{.greedy}}'
          source: log.genericEvent
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("type") && gp=="events" && gevt.contains("radio") && gevt.contains("vap") && gevt.contains("identity") && gevt.contains("aid")
      - trim:
          function: suffix
          substring: 'radio'
          fields:
            - action
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("type") && gp=="events" && gevt.contains("radio") && gevt.contains("vap") && gevt.contains("identity") && gevt.contains("aid")
      - trim:
          function: suffix
          substring: 'vap'
          fields:
            - log.radio
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("type") && gp=="events" && gevt.contains("radio") && gevt.contains("vap") && gevt.contains("identity") && gevt.contains("aid")
      - trim:
          function: suffix
          substring: 'identity'
          fields:
            - log.vap
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("type") && gp=="events" && gevt.contains("radio") && gevt.contains("vap") && gevt.contains("identity") && gevt.contains("aid")
      - trim:
          function: suffix
          substring: 'aid'
          fields:
            - log.identity
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("type") && gp=="events" && gevt.contains("radio") && gevt.contains("vap") && gevt.contains("identity") && gevt.contains("aid")
      - trim:
          function: prefix
          substring: ''''
          fields:
            - log.radio
            - log.vap
            - log.identity
            - log.aid
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("type") && gp=="events" && gevt.contains("radio") && gevt.contains("vap") && gevt.contains("identity") && gevt.contains("aid")
      - trim:
          function: suffix
          substring: ''''
          fields:
            - log.radio
            - log.vap
            - log.identity
            - log.aid
          where:
            variables:
              - get: log.controlFlag
                as: flag
                ofType: string
              - get: log.genericEvent
                as: gevt
                ofType: string
              - get: log.merakiGroup
                as: gp
                ofType: string
            expression: flag!="Init" && gevt.startsWith("type") && gp=="events" && gevt.contains("radio") && gevt.contains("vap") && gevt.contains("identity") && gevt.contains("aid")
      # ............................................................................
      # Cleaning common fields
      - trim:
          function: suffix
          substring: ':'
          fields:
            - log.local.ip
            - origin.ip
            - target.ip
            - log.serverIp
      - trim:
          function: prefix
          substring: ''''
          fields:
            - origin.ip
            - log.peerIdent
            - log.connectivity
            - log.vpnType
      - trim:
          function: suffix
          substring: ''''
          fields:
            - origin.port
            - log.peerIdent
            - log.connectivity
            - log.vpnType
      #......................................................................#
      # Common field conversions
      - cast:
          fields:
            - origin.port
            - target.port
          to: int
      #......................................................................#
      # Removing unused fields
      - delete:
          fields:
            - log.controlFlag
            - log.irrelevant
            - log.genericEvent
