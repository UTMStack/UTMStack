# CISCO ASA filter, version 3.0.0
# Based on examples provided and https://www.cisco.com/c/en/us/td/docs/security/asa/syslog/b_syslog.html
# Filter Input requirements -> Syslog
#
# 1. Parsing the message field containing the Cisco ASA log
pipeline:
  - dataTypes:
      - firewall-cisco-asa
    steps:
      # Common ASA fields
      - grok:
          patterns:
            - fieldName: log.syslogPri
              pattern: '(\<{{.integer}}\>)'
            - fieldName: log.ciscoTime
              pattern: '({{.day}}\s)?{{.monthName}}\s{{.monthDay}}\s{{.year}}\s{{.time}}'
            - fieldName: local.ip
              pattern: '{{.ipv4}}|{{.ipv6}}|{{.hostname}}'
            - fieldName: log.asaHeader
              pattern: '{{.data}}ASA-'
            - fieldName: log.severity
              pattern: '{{.integer}}'
            - fieldName: log.messageId
              pattern: '-{{.integer}}'
            - fieldName: log.ciscoSeparator
              pattern: '\:{{.space}}'
            - fieldName: log.msg
              pattern: '{{.greedy}}'
          source: raw
      - grok:
          patterns:
            - fieldName: log.ciscoTime
              pattern: '({{.day}}\s)?{{.monthName}}\s{{.monthDay}}\s{{.year}}\s{{.time}}'
            - fieldName: local.ip
              pattern: '{{.ipv4}}|{{.ipv6}}|{{.hostname}}'
            - fieldName: log.asaHeader
              pattern: '{{.data}}ASA-'
            - fieldName: log.severity
              pattern: '{{.integer}}'
            - fieldName: log.messageId
              pattern: '-{{.integer}}'
            - fieldName: log.ciscoSeparator
              pattern: '\:{{.space}}'
            - fieldName: log.msg
              pattern: '{{.greedy}}'
          source: raw
      # Removing unwanted prefixes
      - trim:
          function: prefix
          substring: '-'
          fields:
            - log.messageId
      # Field conversions
      - cast:
          fields:
            - log.messageId
          to: int
      # Begining specific message parsing
      #......................................................................#
      # ASA-2-106001
      - grok:
          patterns:
            - fieldName: log.direction
              pattern: '{{.word}}'
            - fieldName: protocol
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: 'connection'
            - fieldName: actionResult
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: 'from'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}})'
            - fieldName: from.port
              pattern: '/{{.integer}}'
            - fieldName: log.irrelevant
              pattern: 'to'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}})'
            - fieldName: to.port
              pattern: '/{{.integer}}'
            - fieldName: log.irrelevant
              pattern: 'flags'
            - fieldName: log.flags
              pattern: '{{.data}}\s'
            - fieldName: log.irrelevant
              pattern: 'on\sinterface'
            - fieldName: log.srcInterface
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106001

      - trim:
          function: prefix
          substring: '/'
          fields:
            - from.port
            - to.port
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106001

      #......................................................................#
      #ASA-2-106017
      - grok:
          patterns:
            - fieldName: actionResult
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: 'IP\sdue\sto'
            - fieldName: action
              pattern: '{{.greedy}}from'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}})'
            - fieldName: log.irrelevant
              pattern: 'to'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}})'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106017
      - trim:
          function: suffix
          substring: 'from'
          fields:
            - action
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106017
      #......................................................................#
      # ASA-1-106021
      - grok:
          patterns:
            - fieldName: actionResult
              pattern: '{{.word}}'
            - fieldName: action
              pattern: '{{.greedy}}from'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}})'
            - fieldName: log.irrelevant
              pattern: 'to'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}})'
            - fieldName: log.irrelevant
              pattern: 'on\sinterface'
            - fieldName: log.srcInterface
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106021
      - trim:
          function: suffix
          substring: 'from'
          fields:
            - action
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106021
      
      #......................................................................#
      # ASA-2-106101
      - grok:
          patterns:
            - fieldName: action
              pattern: 'Number of cached deny-flows for ACL log has reached limit'
            - fieldName: log.rest
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106101
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Number of cached'
            - fieldName: actionResult
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: action
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106101
      # Parsing the limit number
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.numFlows
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.rest
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106101
      # Field conversions
      - cast:
          fields:
            - log.numFlows
          to: int
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106101
      
      #......................................................................#
      # ASA-6-106102,106103
      # First variant
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'access-list'
            - fieldName: log.accessList
              pattern: '{{.data}}\s'
            - fieldName: action
              pattern: '{{.word}}'
            - fieldName: protocol
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: 'for user'
            - fieldName: from.user
              pattern: '(''{{.data}}''|{{.data}})\s'
            - fieldName: log.srcInterface
              pattern: '{{.data}}/'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}})'
            - fieldName: from.port
              pattern: '{{.integer}}'
            - fieldName: log.dstInterface
              pattern: '{{.data}}/'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}})'
            - fieldName: to.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: 'hit-cnt'
            - fieldName: log.hitCount
              pattern: '{{.integer}}'
            - fieldName: log.rest
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106102 || msgId==106103
      # Second variant
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'access-list'
            - fieldName: log.accessList
              pattern: '{{.data}}\s'
            - fieldName: action
              pattern: '{{.word}}'
            - fieldName: protocol
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: 'for user'
            - fieldName: from.user
              pattern: '(''{{.data}}''|{{.data}})\s'
            - fieldName: log.srcInterface
              pattern: '{{.data}}/'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}})'
            - fieldName: from.port
              pattern: '\({{.data}}\)'
            - fieldName: log.irrelevant
              pattern: '-\>'
            - fieldName: log.dstInterface
              pattern: '{{.data}}/'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}})'
            - fieldName: to.port
              pattern: '\({{.data}}\)'
            - fieldName: log.irrelevant
              pattern: 'hit-cnt'
            - fieldName: log.hitCount
              pattern: '{{.integer}}'
            - fieldName: log.rest
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106102 || msgId==106103
      - trim:
          function: suffix
          substring: '/'
          fields:
            - log.srcInterface
            - log.dstInterface
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106102 || msgId==106103
      - trim:
          function: prefix
          substring: ''''
          fields:
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106102 || msgId==106103
      - trim:
          function: suffix
          substring: ''''
          fields:
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106102 || msgId==106103
      - trim:
          function: prefix
          substring: '('
          fields:
            - from.port
            - to.port
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106102 || msgId==106103
      - trim:
          function: suffix
          substring: ')'
          fields:
            - from.port
            - to.port
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106102 || msgId==106103
      #......................................................................#
      # ASA-4-109017
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'User at'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}})'
            - fieldName: log.irrelevant
              pattern: 'exceeded auth proxy connection limit'
            - fieldName: log.limit
              pattern: '\({{.integer}}'
            - fieldName: log.rest
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==109017

      - trim:
          function: prefix
          substring: '('
          fields:
            - log.limit
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==109017
      - cast:
          fields:
            - log.limit
          to: int
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==109017
      #......................................................................#
      # ASA-6-109101
      - grok:
          patterns:
            - fieldName: action
              pattern: 'Received CoA disconnect request'
            - fieldName: log.irrelevant
              pattern: 'from'
            - fieldName: from.ip
              pattern: '{{.ipv4}}|{{.ipv6}}|{{.hostname}}'
            - fieldName: log.irrelevant
              pattern: 'for user'
            - fieldName: from.user
              pattern: '(''{{.data}}''|{{.data}}),'
            - fieldName: log.irrelevant
              pattern: 'with\saudit-session-id:'
            - fieldName: log.auditSessionId
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==109101
      # Action result
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Received CoA'
            - fieldName: actionResult
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: action
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==109101
      - trim:
          function: suffix
          substring: ','
          fields:
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==109101
      #......................................................................#
      # ASA-4-109102
      - grok:
          patterns:
            - fieldName: action
              pattern: 'Received CoA {{.word}}'
            - fieldName: log.irrelevant
              pattern: 'from'
            - fieldName: from.ip
              pattern: '{{.ipv4}}|{{.ipv6}}|{{.hostname}}'
            - fieldName: log.irrelevant
              pattern: ', but cannot find named session'
            - fieldName: log.auditSessionId
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==109102
      # Action result
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Received CoA'
            - fieldName: actionResult
              pattern: '{{.greedy}}'
          source: action
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==109102
      #......................................................................#
      # ASA-3-109103
      - grok:
          patterns:
            - fieldName: action
              pattern: 'CoA {{.word}}'
            - fieldName: log.irrelevant
              pattern: 'from'
            - fieldName: from.ip
              pattern: '{{.ipv4}}|{{.ipv6}}|{{.hostname}}'
            - fieldName: log.irrelevant
              pattern: 'failed for user'
            - fieldName: from.user
              pattern: '(''{{.data}}''|{{.data}}),'
            - fieldName: log.irrelevant
              pattern: 'with session ID:'
            - fieldName: log.auditSessionId
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==109103
      # Action result
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'CoA'
            - fieldName: actionResult
              pattern: '{{.greedy}}'
          source: action
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==109103
      - trim:
          function: suffix
          substring: ','
          fields:
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==109103
      #......................................................................#
      # ASA-109201 to 109213
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'UAUTH(:)? Session(\s|=)'
            - fieldName: log.session
              pattern: '{{.data}},'
            - fieldName: log.irrelevant
              pattern: 'User(\s|=)'
            - fieldName: from.user
              pattern: '{{.data}},'
            - fieldName: log.irrelevant
              pattern: 'Assigned IP(\s|=)'
            - fieldName: from.ip
              pattern: '{{.ipv4}}|{{.ipv6}}|{{.hostname}}'
            - fieldName: log.irrelevant
              pattern: ','
            - fieldName: action
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId>=109201 && msgId<=109213
      - trim:
          function: suffix
          substring: ','
          fields:
            - log.session
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId>=109201 && msgId<=109213
      #......................................................................#
      # ASA-6-113004
      - grok:
          patterns:
            - fieldName: action
              pattern: 'AAA user {{.word}} Successful'
            - fieldName: log.irrelevant
              pattern: '\:'
            - fieldName: log.irrelevant
              pattern: 'server(\s)?=(\s)?'
            - fieldName: to.ip
              pattern: '{{.data}}(\:|,)'
            - fieldName: log.irrelevant
              pattern: '(U|u)ser(\s)?=(\s)?'
            - fieldName: from.user
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113004
      # Action result
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'AAA user {{.word}}'
            - fieldName: actionResult
              pattern: '{{.greedy}}'
          source: action
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113004
      - trim:
          function: suffix
          substring: ':'
          fields:
            - to.ip
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113004
      - trim:
          function: suffix
          substring: ','
          fields:
            - to.ip
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113004
      #......................................................................#
      # ASA-6-113005
      - grok:
          patterns:
            - fieldName: action
              pattern: 'AAA user authentication Rejected(\s)?'
            - fieldName: log.irrelevant
              pattern: '\:(\s)?reason(\s)?=(\s)'
            - fieldName: log.reason
              pattern: '{{.data}}(\:|,)'
            - fieldName: log.irrelevant
              pattern: '(server|Server)(\s)?=(\s)?'
            - fieldName: to.ip
              pattern: '{{.data}}(\:|,)'
            - fieldName: log.irrelevant
              pattern: '(U|u)ser(\s)?=(\s)?'
            - fieldName: from.user
              pattern: '{{.data}}(\:|,)'
            - fieldName: log.irrelevant
              pattern: '(U|u)ser IP(\s)?=(\s)?'
            - fieldName: from.ip
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113005
      # Action result
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'AAA user authentication'
            - fieldName: actionResult
              pattern: '{{.greedy}}'
          source: action
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113005
      - trim:
          function: suffix
          substring: ':'
          fields:
            - log.reason
            - to.ip
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113005
      #......................................................................#
      # ASA-6-113008
      - grok:
          patterns:
            - fieldName: action
              pattern: 'AAA transaction status ACCEPT(\s)?'
            - fieldName: log.irrelevant
              pattern: '\:(\s)?(u|U)ser(\s)?=(\s)?'
            - fieldName: from.user
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113008
      #......................................................................#
      # ASA-6-113009
      # First variant
      - grok:
          patterns:
            - fieldName: action
              pattern: 'AAA retrieved default group policy'
            - fieldName: log.policy
              pattern: '\({{.data}}\)'
            - fieldName: log.irrelevant
              pattern: 'for (u|U)ser(\s)?=(\s)?'
            - fieldName: from.user
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113009
      - trim:
          function: prefix
          substring: '('
          fields:
            - log.policy
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113009
      - trim:
          function: suffix
          substring: ')'
          fields:
            - log.policy
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113009
      # Second variant
      - grok:
          patterns:
            - fieldName: action
              pattern: 'AAA retrieved default group policy'
            - fieldName: log.policy
              pattern: '{{.data}}\sfor'
            - fieldName: log.irrelevant
              pattern: '(u|U)ser(\s)?'
            - fieldName: from.user
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113009
      - trim:
          function: suffix
          substring: 'for'
          fields:
            - log.policy
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113009
      #......................................................................#
      # ASA-6-113010
      - grok:
          patterns:
            - fieldName: action
              pattern: 'AAA challenge received for user'
            - fieldName: from.user
              pattern: '(''{{.data}}''|{{.data}}) from server'
            - fieldName: from.ip
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113010
      - trim:
          function: suffix
          substring: 'from server'
          fields:
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113010
      #......................................................................#
      # ASA-6-113011
      # First variant
      - grok:
          patterns:
            - fieldName: action
              pattern: 'AAA retrieved user specific group policy'
            - fieldName: log.policy
              pattern: '\({{.data}}\)'
            - fieldName: log.irrelevant
              pattern: 'for (u|U)ser(\s)?=(\s)?'
            - fieldName: from.user
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113011
      - trim:
          function: prefix
          substring: '('
          fields:
            - log.policy
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113011
      - trim:
          function: suffix
          substring: ')'
          fields:
            - log.policy
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113011
      # Second variant
      - grok:
          patterns:
            - fieldName: action
              pattern: 'AAA retrieved user specific group policy'
            - fieldName: log.policy
              pattern: '{{.data}}\sfor'
            - fieldName: log.irrelevant
              pattern: '(u|U)ser(\s)?'
            - fieldName: from.user
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113011
      - trim:
          function: suffix
          substring: 'for'
          fields:
            - log.policy
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113011
      #......................................................................#
      # ASA-6-113012
      - grok:
          patterns:
            - fieldName: action
              pattern: 'AAA user authentication Successful(\s)?'
            - fieldName: log.irrelevant
              pattern: '\:(\s)?local database(\s)?:(\s)?user(\s)?=(\s)?'
            - fieldName: from.user
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113012
      # Action result
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'AAA user authentication'
            - fieldName: actionResult
              pattern: '{{.greedy}}'
          source: action
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113012
      #......................................................................#
      # ASA-6-113013
      - grok:
          patterns:
            - fieldName: action
              pattern: 'AAA unable to complete the request'
            - fieldName: log.irrelevant
              pattern: 'Error(\s)?:(\s)?reason(\s)?=(\s)?'
            - fieldName: log.reason
              pattern: '{{.data}}\:'
            - fieldName: log.irrelevant
              pattern: 'user(\s)?=(\s)?'
            - fieldName: from.user
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113013
      - trim:
          function: suffix
          substring: ':'
          fields:
            - log.reason
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113013
      #......................................................................#
      # ASA-6-113014
      - grok:
          patterns:
            - fieldName: action
              pattern: 'AAA authentication server not accessible(\s)?'
            - fieldName: log.irrelevant
              pattern: '\:(\s)?server(\s)?=(\s)?'
            - fieldName: to.ip
              pattern: '{{.ipv4}}|{{.ipv6}}|{{.hostname}}'
            - fieldName: log.irrelevant
              pattern: '\:(\s)?(U|u)ser(\s)?=(\s)?'
            - fieldName: from.user
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113014
      #......................................................................#
      # ASA-6-113015, 113017
      - grok:
          patterns:
            - fieldName: action
              pattern: '(AAA user authentication|AAA credentials)\s(R|r)ejected(\s)?'
            - fieldName: log.irrelevant
              pattern: '\:(\s)?reason(\s)?=(\s)?'
            - fieldName: log.reason
              pattern: '{{.data}}(\s)?\:'
            - fieldName: log.irrelevant
              pattern: 'local database(\s)?:(\s)?(U|u)ser(\s)?=(\s)?'
            - fieldName: from.user
              pattern: '(''{{.data}}''|{{.data}})(\s)?:'
            - fieldName: log.irrelevant
              pattern: 'user IP(\s)?=(\s)?'
            - fieldName: to.ip
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113015 || msgId==113017
      - trim:
          function: suffix
          substring: ':'
          fields:
            - log.reason
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113015 || msgId==113017
      # Action result
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '(AAA user authentication|AAA credentials)\s'
            - fieldName: actionResult
              pattern: '{{.greedy}}'
          source: action
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113015 || msgId==113017
      #......................................................................#
      # ASA-6-113016
      - grok:
          patterns:
            - fieldName: action
              pattern: 'AAA credentials rejected(\s)?'
            - fieldName: log.irrelevant
              pattern: '\:(\s)?reason(\s)?=(\s)?'
            - fieldName: log.reason
              pattern: '{{.data}}(\s)?\:'
            - fieldName: log.irrelevant
              pattern: 'server(\s)?=(\s)?'
            - fieldName: to.ip
              pattern: '{{.data}}(\s)?\:'
            - fieldName: log.irrelevant
              pattern: '(U|u)ser(\s)?=(\s)?'
            - fieldName: from.user
              pattern: '(''{{.data}}''|{{.data}})(\s)?:'
            - fieldName: log.irrelevant
              pattern: 'user IP(\s)?=(\s)?'
            - fieldName: from.ip
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113016
      - trim:
          function: suffix
          substring: ':'
          fields:
            - log.reason
            - to.ip
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113016
      # Action result
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'AAA credentials'
            - fieldName: actionResult
              pattern: '{{.greedy}}'
          source: action
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113016
      #......................................................................#
      # ASA-4-113019
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Group(\s)?=(\s)?'
            - fieldName: from.group
              pattern: '{{.data}}(\s)?,'
            - fieldName: log.irrelevant
              pattern: '(U|u)sername(\s)?=(\s)?'
            - fieldName: from.user
              pattern: '(''{{.data}}''|{{.data}})(\s)?,'
            - fieldName: log.irrelevant
              pattern: 'IP(\s)?=(\s)?'
            - fieldName: from.ip
              pattern: '{{.data}},'
            - fieldName: action
              pattern: '(\s)?Session disconnected\.'
            - fieldName: log.irrelevant
              pattern: '(\s)?Session Type:(\s)?'
            - fieldName: log.sessionType
              pattern: '{{.data}},'
            - fieldName: log.irrelevant
              pattern: '(\s)?Duration:(\s)?'
            - fieldName: log.duration
              pattern: '{{.data}},'
            - fieldName: log.irrelevant
              pattern: '(\s)?Bytes xmt:(\s)?'
            - fieldName: from.bytesSent
              pattern: '{{.data}},'
            - fieldName: log.irrelevant
              pattern: '(\s)?Bytes rcv:(\s)?'
            - fieldName: from.bytesReceived
              pattern: '{{.data}},'
            - fieldName: log.irrelevant
              pattern: '(\s)?Reason:(\s)?'
            - fieldName: log.reason
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113019
      - trim:
          function: suffix
          substring: ','
          fields:
            - from.group
            - from.user
            - from.ip
            - log.sessionType
            - log.duration
            - from.bytesSent
            - from.bytesReceived
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113019
      - cast:
          fields:
            - from.bytesSent
            - from.bytesReceived
          to: int
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113019
      #......................................................................#
      # ASA-113031,113032,113033
      # Common fields
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Group(\s)?'
            - fieldName: from.group
              pattern: '{{.data}}\sUser'
            - fieldName: from.user
              pattern: '(''{{.data}}''|{{.data}})(\s)?IP'
            - fieldName: from.ip
              pattern: '{{.ipv4}}|{{.ipv6}}|{{.hostname}}'
            - fieldName: log.rest
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113031 || msgId==113032 || msgId==113033
      - trim:
          function: suffix
          substring: 'User'
          fields:
            - from.group
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113031 || msgId==113032 || msgId==113033
      - trim:
          function: suffix
          substring: 'IP'
          fields:
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113031 || msgId==113032 || msgId==113033
      # Specific fields
      - grok:
          patterns:
            - fieldName: action
              pattern: 'AnyConnect (vpn-filter|ipv6-vpn-filter|session not allowed)'
            - fieldName: log.filter
              pattern: '{{.data}}\sis'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.rest
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113031 || msgId==113032 || msgId==113033
      - grok:
          patterns:
            - fieldName: action
              pattern: 'AnyConnect (vpn-filter|ipv6-vpn-filter|session not allowed)'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.rest
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113031 || msgId==113032 || msgId==113033
      - trim:
          function: suffix
          substring: 'is'
          fields:
            - log.filter
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113031 || msgId==113032 || msgId==113033
      #......................................................................#
      # ASA-113034,113035,113036,113038,113039
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Group(\s)?'
            - fieldName: from.group
              pattern: '(\<)?{{.data}}(\>)?\sUser'
            - fieldName: from.user
              pattern: '(''{{.data}}''|(\<)?{{.data}}(\>)?)(\s)?IP'
            - fieldName: from.ip
              pattern: '(\<)?({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\>)?'
            - fieldName: log.rest
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113034 || msgId==113035 || msgId==113036 || msgId==113038 || msgId==113039
      # Cleaning fields
      - trim:
          function: suffix
          substring: 'User'
          fields:
            - from.group
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113034 || msgId==113035 || msgId==113036 || msgId==113038 || msgId==113039
      - trim:
          function: suffix
          substring: 'IP'
          fields:
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113034 || msgId==113035 || msgId==113036 || msgId==113038 || msgId==113039
      - trim:
          function: prefix
          substring: '<'
          fields:
            - from.group
            - from.user
            - from.ip
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113034 || msgId==113035 || msgId==113036 || msgId==113038 || msgId==113039
      - trim:
          function: suffix
          substring: '>'
          fields:
            - from.group
            - from.user
            - from.ip
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113034 || msgId==113035 || msgId==113036 || msgId==113038 || msgId==113039
      #......................................................................#
      # ASA-4-113042
      - grok:
          patterns:
            - fieldName: action
              pattern: 'CoA: Non-HTTP connection from'
            - fieldName: log.srcInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: from.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: 'to'
            - fieldName: log.dstInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: to.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: 'for user'
            - fieldName: remote.user
              pattern: '(''{{.data}}''|{{.data}})(\s)?at'
            - fieldName: remote.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: actionResult
              pattern: '{{.word}}'
            - fieldName: log.rest
              pattern: '{{.greedy}}'
          source: log.msg
      - trim:
          function: suffix
          substring: 'from'
          fields:
            - action
      - trim:
          function: suffix
          substring: ':'
          fields:
            - log.srcInterface
            - log.dstInterface
      - trim:
          function: suffix
          substring: '/'
          fields:
            - from.ip
            - to.ip
      - trim:
          function: suffix
          substring: 'at'
          fields:
            - remote.user
      #......................................................................#
      # ASA-2-201003
      - grok:
          patterns:
            - fieldName: action
              pattern: 'Embryonic limit exceeded'
            - fieldName: log.numCons
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '/(\s)?'
            - fieldName: log.limit
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: 'for'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.irrelevant
              pattern: '/(\s)?'
            - fieldName: from.port
              pattern: '{{.integer}}'
            - fieldName: log.globalIp
              pattern: '\({{.data}}\)'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.irrelevant
              pattern: '/(\s)?'
            - fieldName: to.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: 'on interface'
            - fieldName: log.dstInterface
              pattern: '{{.greedy}}'
          source: log.msg
      - trim:
          function: prefix
          substring: '('
          fields:
            - log.globalIp
      - trim:
          function: suffix
          substring: ')'
          fields:
            - log.globalIp
      #......................................................................#
      # ASA-4-209003
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Fragment database limit of'
            - fieldName: log.limit
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: 'exceeded:(\s)?src(\s)?=(\s)?'
            - fieldName: from.ip
              pattern: '{{.data}},'
            - fieldName: log.irrelevant
              pattern: 'dest(\s)?=(\s)?'
            - fieldName: to.ip
              pattern: '{{.data}},'
            - fieldName: log.irrelevant
              pattern: 'proto(\s)?=(\s)?'
            - fieldName: protocol
              pattern: '{{.data}},'
            - fieldName: log.irrelevant
              pattern: 'id(\s)?=(\s)?'
            - fieldName: log.id
              pattern: '{{.greedy}}'
          source: log.msg
      - trim:
          function: suffix
          substring: ','
          fields:
            - from.ip
            - to.ip
            - protocol
      - cast:
          fields:
            - log.limit
          to: int
      #......................................................................#
      # ASA-3-316001
      - grok:
          patterns:
            - fieldName: action
              pattern: 'Denied new tunnel'
            - fieldName: log.irrelevant
              pattern: 'to'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.rest
              pattern: '{{.greedy}}'
          source: log.msg
      # Action result
      - grok:
          patterns:
            - fieldName: actionResult
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: action
      #......................................................................#
      # ASA-3-316002
      - grok:
          patterns:
            - fieldName: action
              pattern: 'VPN Handle error'
            - fieldName: log.irrelevant
              pattern: '\:(\s)?protocol='
            - fieldName: protocol
              pattern: '{{.data}},'
            - fieldName: log.irrelevant
              pattern: 'src\s'
            - fieldName: log.inIfNum
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '\:(\s)?'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.irrelevant
              pattern: ',(\s)?dst'
            - fieldName: log.outIfNum
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '\:(\s)?'
            - fieldName: to.ip
              pattern: '{{.greedy}}'
          source: log.msg
      - trim:
          function: suffix
          substring: ','
          fields:
            - protocol
      - cast:
          fields:
            - log.inIfNum
            - log.outIfNum
          to: int
      #......................................................................#
      # ASA-302003,302004
      # First variant
      - grok:
          patterns:
            - fieldName: action
              pattern: '(Built H245 connection|Pre-allocate H323 UDP backconnection)'
            - fieldName: log.irrelevant
              pattern: 'for'
            - fieldName: log.foreignAddress
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.tmpToip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})((\s)?/(\s)?{{.integer}}|(\s)?/)?'
            - fieldName: log.irrelevant
              pattern: '(to\s)?'
            - fieldName: log.localAddress
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.tmpFromip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})((\s)?/(\s)?{{.integer}}|(\s)?/)?'
            
          source: log.msg
      # Second variant
      - grok:
          patterns:
            - fieldName: action
              pattern: '(Built H245 connection|Pre-allocate H323 UDP backconnection)'
            - fieldName: log.irrelevant
              pattern: 'for'
            - fieldName: log.foreignAddress
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.tmpToip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})((\s)?/(\s)?{{.integer}}|(\s)?/)?'
            - fieldName: log.localAddress
              pattern: '({{.ipv4}}|{{.ipv6}})'
            - fieldName: log.tmpFromip
              pattern: '({{.ipv4}}|{{.ipv6}})((\s)?/(\s)?{{.integer}}|(\s)?/)?'
            
          source: log.msg
      # Parsing from/to ip and port
      - grok:
          patterns:
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: to.port
              pattern: '{{.greedy}}'
                       
          source: log.tmpToip
      - grok:
          patterns:
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
                       
          source: log.tmpToip
      - grok:
          patterns:
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: from.port
              pattern: '{{.greedy}}'
                       
          source: log.tmpFromip
      - grok:
          patterns:
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
                       
          source: log.tmpFromip
      - trim:
          function: prefix
          substring: '/'
          fields:
            - from.port
            - to.port
      # Removing temp fields
      - delete:
          fields:
            - log.tmpFromip
            - log.tmpToip
      #......................................................................#
      # ASA-6-302012
      - grok:
          patterns:
            - fieldName: action
              pattern: 'Pre-allocate H225 Call Signalling Connection'
            - fieldName: log.irrelevant
              pattern: 'for faddr'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: from.port
              pattern: '/(\s)?{{.integer}}'
            - fieldName: log.irrelevant
              pattern: 'to laddr'
            - fieldName: to.ip
              pattern: '{{.greedy}}'
            
          source: log.msg
      - trim:
          function: prefix
          substring: '/'
          fields:
            - from.port
      #......................................................................#
      # ASA-6-302013
      - grok:
          patterns:
            - fieldName: log.tmpDirection
              pattern: 'Built\s{{.word}}\s(Probe)?'
            - fieldName: protocol
              pattern: '{{.word}}'
            - fieldName: log.connectionId
              pattern: '({{.data}})for'
            - fieldName: log.srcInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: from.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.mappedIpFrom
              pattern: '{{.data}}/'
            - fieldName: log.mappedPortFrom
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '\)'
            - fieldName: log.tmpFwUserFrom
              pattern: '({{.data}})?to'
            - fieldName: log.dstInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: to.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.mappedIpTo
              pattern: '{{.data}}/'
            - fieldName: log.mappedPortTo
              pattern: '{{.integer}}'
            - fieldName: log.rest
              pattern: '{{.greedy}}'
            
          source: log.msg
      # Parsing direction field
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Built'
            - fieldName: log.direction
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
            
          source: log.tmpDirection
      # Parsing firewall user from
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.firewallUserFrom
              pattern: '{{.data}}\)'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
            
          source: log.tmpFwUserFrom
      # Parsing firewall user to, and AAA name of the user if exists
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\)'
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.firewallUserTo
              pattern: '{{.data}}\)'
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: from.user
              pattern: '{{.data}}\)'  
          source: log.rest

      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\)'
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.firewallUserTo
              pattern: '{{.data}}\)'
          source: log.rest

      - trim:
          function: suffix
          substring: ')'
          fields:
            - log.firewallUserFrom
            - log.firewallUserTo
            - from.user
      # Removing tmp fields
      - delete:
          fields:
            - log.tmpDirection
            - log.tmpFwUserFrom

      # Cleaning fields
      - trim:
          function: suffix
          substring: ':'
          fields:
            - log.srcInterface
            - log.dstInterface
      - trim:
          function: suffix
          substring: '/'
          fields:
            - from.ip
            - to.ip
            - log.mappedIpFrom
            - log.mappedIpTo
      - trim:
          function: suffix
          substring: 'for'
          fields:
            - log.connectionId
      #......................................................................#
      # ASA-6-302014
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Teardown\s(Probe)?'
            - fieldName: protocol
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: 'connection'
            - fieldName: log.connectionId
              pattern: '({{.data}})for'
            - fieldName: log.srcInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: from.port
              pattern: '{{.integer}}'
            - fieldName: log.tmpFwUserFrom
              pattern: '({{.data}})?to'
            - fieldName: log.dstInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: to.port
              pattern: '{{.integer}}'
            - fieldName: log.tmpFwUserTo
              pattern: '({{.data}})?duration'
            - fieldName: log.duration
              pattern: '{{.time}}'
            - fieldName: log.irrelevant
              pattern: 'bytes'
            - fieldName: from.bytesSent
              pattern: '{{.integer}}'
            - fieldName: log.rest
              pattern: '{{.greedy}}'
          source: log.msg
      # Parsing firewall user from
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.firewallUserFrom
              pattern: '{{.data}}\)'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.tmpFwUserFrom
      # Parsing firewall user to
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.firewallUserTo
              pattern: '{{.data}}\)'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.tmpFwUserTo
      # Parsing AAA user if exists
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '{{.data}}\('
            - fieldName: from.user
              pattern: '{{.data}}\)'
          source: log.rest

      - trim:
          function: suffix
          substring: ')'
          fields:
            - log.firewallUserFrom
            - log.firewallUserTo
            - from.user
      # Removing tmp fields
      - delete:
          fields:
            - log.tmpFwUserFrom
            - log.tmpFwUserTo

      # Cleaning fields
      - trim:
          function: suffix
          substring: ':'
          fields:
            - log.srcInterface
            - log.dstInterface
      - trim:
          function: suffix
          substring: '/'
          fields:
            - from.ip
            - to.ip
      - trim:
          function: suffix
          substring: 'for'
          fields:
            - log.connectionId
      #......................................................................#
      # ASA-6-302015
      - grok:
          patterns:
            - fieldName: log.tmpDirection
              pattern: 'Built\s{{.word}}'
            - fieldName: protocol
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: 'connection'
            - fieldName: log.connectionId
              pattern: '({{.data}})for'
            - fieldName: log.srcInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: from.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.mappedIpFrom
              pattern: '{{.data}}/'
            - fieldName: log.mappedPortFrom
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '\)'
            - fieldName: log.tmpFwUserFrom
              pattern: '({{.data}})?to'
            - fieldName: log.dstInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: to.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.mappedIpTo
              pattern: '{{.data}}/'
            - fieldName: log.mappedPortTo
              pattern: '{{.integer}}'
            - fieldName: log.rest
              pattern: '{{.greedy}}'
            
          source: log.msg
      # Parsing direction field
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Built'
            - fieldName: log.direction
              pattern: '{{.greedy}}'
          source: log.tmpDirection
      # Parsing firewall user from
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.firewallUserFrom
              pattern: '{{.data}}\)'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
            
          source: log.tmpFwUserFrom
      # Parsing firewall user to, and AAA name of the user if exists
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\)'
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.firewallUserTo
              pattern: '{{.data}}\)'
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: from.user
              pattern: '{{.data}}\)'  
          source: log.rest

      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\)'
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.firewallUserTo
              pattern: '{{.data}}\)'
          source: log.rest

      - trim:
          function: suffix
          substring: ')'
          fields:
            - log.firewallUserFrom
            - log.firewallUserTo
            - from.user
      # Removing tmp fields
      - delete:
          fields:
            - log.tmpDirection
            - log.tmpFwUserFrom

      # Cleaning fields
      - trim:
          function: suffix
          substring: ':'
          fields:
            - log.srcInterface
            - log.dstInterface
      - trim:
          function: suffix
          substring: '/'
          fields:
            - from.ip
            - to.ip
            - log.mappedIpFrom
            - log.mappedIpTo
      - trim:
          function: suffix
          substring: 'for'
          fields:
            - log.connectionId
      #......................................................................#
      # ASA-6-302016
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Teardown'
            - fieldName: protocol
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: 'connection'
            - fieldName: log.connectionId
              pattern: '({{.data}})for'
            - fieldName: log.srcInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: from.port
              pattern: '{{.integer}}'
            - fieldName: log.tmpFwUserFrom
              pattern: '({{.data}})?to'
            - fieldName: log.dstInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: to.port
              pattern: '{{.integer}}'
            - fieldName: log.tmpFwUserTo
              pattern: '({{.data}})?duration'
            - fieldName: log.duration
              pattern: '{{.time}}'
            - fieldName: log.rest
              pattern: '{{.greedy}}'
            
          source: log.msg
      # Parsing firewall user from
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.firewallUserFrom
              pattern: '{{.data}}\)'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.tmpFwUserFrom
      # Parsing firewall user to
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.firewallUserTo
              pattern: '{{.data}}\)'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.tmpFwUserTo
      # Parsing firewall user to, and AAA name of the user if exists
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'bytes'
            - fieldName: from.bytesSent
              pattern: '{{.integer}}'  
          source: log.rest

      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'bytes'
            - fieldName: from.bytesSent
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: from.user
              pattern: '{{.data}}\)'
          source: log.rest

      - trim:
          function: suffix
          substring: ')'
          fields:
            - log.firewallUserFrom
            - log.firewallUserTo
            - from.user
      # Removing tmp fields
      - delete:
          fields:
            - log.tmpDirection
            - log.tmpFwUserFrom
            - log.tmpFwUserTo

      # Cleaning fields
      - trim:
          function: suffix
          substring: ':'
          fields:
            - log.srcInterface
            - log.dstInterface
      - trim:
          function: suffix
          substring: '/'
          fields:
            - from.ip
            - to.ip
      - trim:
          function: suffix
          substring: 'for'
          fields:
            - log.connectionId
      #......................................................................#
      # ASA-6-302017
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Built'
            - fieldName: log.direction
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: 'GRE connection'
            - fieldName: log.connectionId
              pattern: '({{.data}})from'
            - fieldName: log.srcInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.translatedIpFrom
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.irrelevant
              pattern: '\)'
            - fieldName: log.tmpFwUserFrom
              pattern: '({{.data}})?to'
            - fieldName: log.dstInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: log.realCid
              pattern: '{{.data}}\('
            - fieldName: log.translatedIpTo
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: log.rest
              pattern: '{{.greedy}}'
          source: log.msg
      # Parsing firewall user from
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.firewallUserFrom
              pattern: '{{.data}}\)'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.tmpFwUserFrom
      # Parsing translatedCid and, firewall user to and AAA user if present
      - grok:
          patterns:
            - fieldName: log.translatedCid
              pattern: '{{.data}}\)'
            - fieldName: log.tmpUserInfo
              pattern: '{{.greedy}}'
          source: log.rest
      - grok:
          patterns:
            - fieldName: log.translatedCid
              pattern: '{{.data}}\)'
          source: log.rest
      # FW user and AAA user
      - grok:
          patterns:
            - fieldName: log.tmpFwUserTo
              pattern: '\({{.data}}\)'
            - fieldName: to.user
              pattern: '\({{.data}}\)'
          source: log.tmpUserInfo
      - grok:
          patterns:
            - fieldName: log.tmpFwUserTo
              pattern: '\({{.data}}\)'
          source: log.tmpUserInfo
      # Parsing firewall user to
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.firewallUserTo
              pattern: '{{.data}}\)'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.tmpFwUserTo
      - trim:
          function: suffix
          substring: ')'
          fields:
            - log.firewallUserFrom
            - log.firewallUserTo
            - to.user
            - log.translatedCid
      - trim:
          function: suffix
          substring: '('
          fields:
            - log.realCid
            - to.user
      # Removing tmp fields
      - delete:
          fields:
            - log.tmpDirection
            - log.tmpFwUserFrom
            - log.tmpFwUserTo
            - log.tmpUserInfo
      # Cleaning fields
      - trim:
          function: suffix
          substring: ':'
          fields:
            - log.srcInterface
            - log.dstInterface
      - trim:
          function: suffix
          substring: '/'
          fields:
            - to.ip
            - log.translatedIpTo
      - trim:
          function: suffix
          substring: 'from'
          fields:
            - log.connectionId
      #......................................................................#
      # ASA-6-302018
      - grok:
          patterns:
            - fieldName: action
              pattern: 'Teardown GRE connection'
            - fieldName: log.connectionId
              pattern: '({{.data}})from'
            - fieldName: log.srcInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.translatedIpFrom
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.irrelevant
              pattern: '\)'
            - fieldName: log.tmpFwUserFrom
              pattern: '({{.data}})?to'
            - fieldName: log.dstInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: log.realCid
              pattern: '{{.data}}\('
            - fieldName: log.translatedIpTo
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: log.translatedCid
              pattern: '{{.data}}\)'
            - fieldName: log.tmpFwUserTo
              pattern: '({{.data}})?duration'
            - fieldName: log.duration
              pattern: '{{.time}}'
            - fieldName: log.rest
              pattern: '{{.greedy}}'
          source: log.msg
      # Parsing firewall user from
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.firewallUserFrom
              pattern: '{{.data}}\)'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.tmpFwUserFrom
      # Parsing firewall user to
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.firewallUserTo
              pattern: '{{.data}}\)'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.tmpFwUserTo
      # Parsing firewall user to, and AAA name of the user if exists
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'bytes'
            - fieldName: from.bytesSent
              pattern: '{{.integer}}'  
          source: log.rest

      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'bytes'
            - fieldName: from.bytesSent
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: from.user
              pattern: '{{.data}}\)'
          source: log.rest

      - trim:
          function: suffix
          substring: ')'
          fields:
            - log.firewallUserFrom
            - log.firewallUserTo
            - from.user
            - log.translatedCid
      # Removing tmp fields
      - delete:
          fields:
            - log.tmpFwUserFrom
            - log.tmpFwUserTo
      # Cleaning fields
      - trim:
          function: suffix
          substring: '('
          fields:
            - log.realCid
      - trim:
          function: suffix
          substring: ':'
          fields:
            - log.srcInterface
            - log.dstInterface
      - trim:
          function: suffix
          substring: '/'
          fields:
            - to.ip
            - log.translatedIpTo
      - trim:
          function: suffix
          substring: 'from'
          fields:
            - log.connectionId
      #......................................................................#
      # ASA-6-302020, 302021 (awaiting test)
      # 302020
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Built'
            - fieldName: log.direction
              pattern: '{{.word}}'
            - fieldName: protocol
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: 'connection for faddr'
            - fieldName: log.tmpFaddrAndFwUser
              pattern: '({{.data}})gaddr'
            - fieldName: log.tmpGaddrAndFwUser
              pattern: '({{.data}})laddr'
            - fieldName: log.tmpLaddrAndFwUser
              pattern: '({{.data}})type'
            - fieldName: log.icmpType
              pattern: '({{.data}})code'
            - fieldName: log.icmpCode
              pattern: '{{.greedy}}'
          source: log.msg
      # 302021
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Teardown'
            - fieldName: protocol
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: 'connection for faddr'
            - fieldName: log.tmpFaddrAndFwUser
              pattern: '({{.data}})gaddr'
            - fieldName: log.tmpGaddrAndFwUser
              pattern: '({{.data}})laddr'
            - fieldName: log.tmpLaddrAndFwUser
              pattern: '({{.data}})type'
            - fieldName: log.icmpType
              pattern: '({{.data}})code'
            - fieldName: log.icmpCode
              pattern: '{{.greedy}}'
          source: log.msg
      # Common parsing for 302020 and 302021
      # For parsing faddr and fwuser from (Begin with ip/port), or icmpSeqNum
      - grok:
          patterns:
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: from.port
              pattern: '{{.integer}}'
            - fieldName: log.tmpFwUserFrom
              pattern: '{{.greedy}}'
          source: log.tmpFaddrAndFwUser
      - grok:
          patterns:
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.tmpFwUserFrom
              pattern: '{{.greedy}}'
          source: log.tmpFaddrAndFwUser
      # icmpSeqNum variants
      - grok:
          patterns:
            - fieldName: log.icmpSeqNum
              pattern: '{{.integer}}'
            - fieldName: log.tmpFwUserFrom
              pattern: '\({{.data}}\)'
            - fieldName: log.irrelevant
              pattern: 'gaddr'
          source: log.tmpFaddrAndFwUser
      - grok:
          patterns:
            - fieldName: log.icmpSeqNum
              pattern: '{{.integer}}'
            - fieldName: log.tmpFwUserFrom
              pattern: 'gaddr'
          source: log.tmpFaddrAndFwUser
      # Cleaning icmpSeqNum
      - trim:
          function: suffix
          substring: 'gaddr'
          fields:
            - log.icmpSeqNum
      # Continue with firewall user from
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.firewallUserFrom
              pattern: '{{.data}}\)'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.tmpFwUserFrom
      # For parsing gaddr and global fwuser (Begin with ip/port), or icmpType
      - grok:
          patterns:
            - fieldName: log.globalIp
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: log.globalPort
              pattern: '{{.integer}}'
            - fieldName: log.tmpFwUserGlobal
              pattern: '{{.greedy}}'
          source: log.tmpGaddrAndFwUser
      - grok:
          patterns:
            - fieldName: log.globalIp
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.tmpFwUserGlobal
              pattern: '{{.greedy}}'
          source: log.tmpGaddrAndFwUser
      # icmpType variants
      - grok:
          patterns:
            - fieldName: log.icmpType
              pattern: '{{.integer}}'
            - fieldName: log.tmpFwUserGlobal
              pattern: '\({{.data}}\)'
            - fieldName: log.irrelevant
              pattern: 'laddr'
          source: log.tmpGaddrAndFwUser
      - grok:
          patterns:
            - fieldName: log.icmpType
              pattern: '{{.integer}}'
            - fieldName: log.tmpFwUserGlobal
              pattern: 'laddr'
          source: log.tmpGaddrAndFwUser
      # Cleaning icmpType
      - trim:
          function: suffix
          substring: 'laddr'
          fields:
            - log.icmpType
      - trim:
          function: suffix
          substring: 'code'
          fields:
            - log.icmpType
      # Continue with global firewall
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.globalFirewallUser
              pattern: '{{.data}}\)'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.tmpFwUserGlobal
      # For parsing laddr and fwuser to (Begin with ip/port)
      - grok:
          patterns:
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: to.port
              pattern: '{{.integer}}'
            - fieldName: log.tmpFwUserTo
              pattern: '{{.greedy}}'
          source: log.tmpLaddrAndFwUser
      - grok:
          patterns:
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.tmpFwUserTo
              pattern: '{{.greedy}}'
          source: log.tmpLaddrAndFwUser
      # Continue with firewall user to
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.firewallUserTo
              pattern: '{{.data}}\)'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.tmpFwUserTo
      # Cleaning fields
      - trim:
          function: suffix
          substring: '/'
          fields:
            - to.ip
            - from.ip
      - trim:
          function: suffix
          substring: ')'
          fields:
            - log.firewallUserFrom
            - log.firewallUserTo
            - log.globalFirewallUser
      # Removing tmp fields
      - delete:
          fields:
            - log.tmpFwUserFrom
            - log.tmpFwUserTo
            - log.tmpFwUserGlobal
            - log.tmpFaddrAndFwUser
            - log.tmpGaddrAndFwUser
            - log.tmpLaddrAndFwUser
      #......................................................................#
      # ASA-6-302022, 302024, 302026 (awaiting test)
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Built'
            - fieldName: log.role
              pattern: '({{.data}})stub'
            - fieldName: protocol
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: 'connection for'
            - fieldName: log.srcInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: from.port
              pattern: '{{.integer}}'
            - fieldName: log.tmpMappedIpPortFrom
              pattern: '\({{.data}}\)'
            - fieldName: log.irrelevant
              pattern: 'to'
            - fieldName: log.dstInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: to.port
              pattern: '{{.integer}}'
            - fieldName: log.tmpMappedIpPortTo
              pattern: '\({{.data}}\)'
          source: log.msg
      # Parsing mapped ip,port from tmp fields
      # With port
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.mappedIpFrom
              pattern: '{{.data}}/'
            - fieldName: log.mappedPortFrom
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '\)'
          source: log.tmpMappedIpPortFrom
      # Without port
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.mappedIpFrom
              pattern: '{{.data}}'
            - fieldName: log.irrelevant
              pattern: '\)'
          source: log.tmpMappedIpPortFrom
      # Parsing mapped ip,port to, from tmp fields
      # With port
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.mappedIpTo
              pattern: '{{.data}}/'
            - fieldName: log.mappedPortTo
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '\)'
          source: log.tmpMappedIpPortTo
      # Without port
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.mappedIpTo
              pattern: '{{.data}}'
            - fieldName: log.irrelevant
              pattern: '\)'
          source: log.tmpMappedIpPortTo
      # Cleaning fields
      - trim:
          function: suffix
          substring: 'stub'
          fields:
            - log.role
      - trim:
          function: suffix
          substring: ':'
          fields:
            - log.srcInterface
            - log.dstInterface
      - trim:
          function: suffix
          substring: '/'
          fields:
            - from.ip
            - to.ip
            - log.mappedIpFrom
            - log.mappedIpTo
      # Removing tmp fields
      - delete:
          fields:
            - log.tmpMappedIpPortFrom
            - log.tmpMappedIpPortTo
      #......................................................................#
      # ASA-6-302023, 302025, 302027 (awaiting test)
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Teardown stub'
            - fieldName: protocol
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: 'connection for'
            - fieldName: log.srcInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: from.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: 'to'
            - fieldName: log.dstInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: to.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: 'duration'
            - fieldName: log.duration
              pattern: '{{.time}}'
            - fieldName: log.irrelevant
              pattern: 'bytes'
            - fieldName: from.bytesSent
              pattern: '{{.integer}}'
            - fieldName: log.reason
              pattern: '{{.greedy}}'
          source: log.msg
      # Cleaning fields
      - trim:
          function: suffix
          substring: ':'
          fields:
            - log.srcInterface
            - log.dstInterface
      - trim:
          function: suffix
          substring: '/'
          fields:
            - from.ip
            - to.ip
      #......................................................................#
      # ASA-302033,302034
      - grok:
          patterns:
            - fieldName: action
              pattern: '(Pre-allocated|Unable to pre-allocate) H323 GUP Connection'
            - fieldName: log.irrelevant
              pattern: 'for faddr'
            - fieldName: log.srcInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: log.tmpPortFrom
              pattern: '{{.data}}to laddr'
            - fieldName: log.dstInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: log.tmpIpPortTo
              pattern: '{{.greedy}}'
          source: log.msg
      # Parsing optional ports from y to
      - grok:
          patterns:
            - fieldName: from.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.tmpPortFrom
      - grok:
          patterns:
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: to.port
              pattern: '{{.greedy}}'
          source: log.tmpIpPortTo
      - grok:
          patterns:
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?'
          source: log.tmpIpPortTo
      # Cleaning fields
      - trim:
          function: suffix
          substring: ':'
          fields:
            - log.srcInterface
            - log.dstInterface
      - trim:
          function: suffix
          substring: '/'
          fields:
            - from.ip
            - to.ip
      # Remove tmp fields
      - delete:
          fields:
            - log.tmpPortFrom
            - log.tmpIpPortTo
      #......................................................................#
      #ASA-6-302035
      - grok:
          patterns:
            - fieldName: log.tmpDirection
              pattern: 'Built\s{{.word}}\s{{.word}}\sconnection'
            - fieldName: log.connectionId
              pattern: '({{.data}})for'
            - fieldName: log.srcInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: from.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.mappedIpFrom
              pattern: '{{.data}}/'
            - fieldName: log.mappedPortFrom
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '\)'
            - fieldName: log.tmpFwUserFrom
              pattern: '({{.data}})?to'
            - fieldName: log.dstInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: to.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.mappedIpTo
              pattern: '{{.data}}/'
            - fieldName: log.rest
              pattern: '{{.greedy}}'
            
          source: log.msg
      # Parsing direction field
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Built'
            - fieldName: log.direction
              pattern: '{{.word}}'
            - fieldName: protocol
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.tmpDirection
      # Parsing firewall user from
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.firewallUserFrom
              pattern: '{{.data}}\)'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.tmpFwUserFrom
      # Parsing port to, firewall user to, and, from user
      - grok:
          patterns:
            - fieldName: log.mappedPortTo
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '\)'
            - fieldName: log.tmpFwUserTo
              pattern: '{{.greedy}}'
          source: log.rest
      # Without user info
      - grok:
          patterns:
            - fieldName: log.mappedPortTo
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '\)'
          source: log.rest
      # Parsing firewall user to
      # With from.user
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.firewallUserTo
              pattern: '{{.data}}\)'
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: from.user
              pattern: '{{.data}}\)'
          source: log.tmpFwUserTo
      # Without from.user
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.firewallUserTo
              pattern: '{{.data}}\)'
          source: log.tmpFwUserTo
      
      # Decoding outside and inside sg_info
      - grok:
          patterns:
            - fieldName: log.firewallUserFrom
              pattern: '{{.data}}(\s)?,'
            - fieldName: log.outsideSgInfo
              pattern: '{{.data}}\)'
          source: log.firewallUserFrom
      - grok:
          patterns:
            - fieldName: log.firewallUserTo
              pattern: '{{.data}}(\s)?,'
            - fieldName: log.insideSgInfo
              pattern: '{{.data}}\)'
          source: log.firewallUserTo
      - trim:
          function: suffix
          substring: ')'
          fields:
            - log.firewallUserFrom
            - log.firewallUserTo
            - from.user
            - log.insideSgInfo
            - log.outsideSgInfo
      # Removing tmp fields
      - delete:
          fields:
            - log.tmpDirection
            - log.tmpFwUserFrom
            - log.tmpFwUserTo

      # Cleaning fields
      - trim:
          function: suffix
          substring: ':'
          fields:
            - log.srcInterface
            - log.dstInterface
      - trim:
          function: suffix
          substring: '/'
          fields:
            - from.ip
            - to.ip
            - log.mappedIpFrom
            - log.mappedIpTo
      - trim:
          function: suffix
          substring: 'for'
          fields:
            - log.connectionId
      - trim:
          function: suffix
          substring: ','
          fields:
            - log.firewallUserFrom
            - log.firewallUserTo
      #......................................................................#
      # ASA-6-302036
      - grok:
          patterns:
            - fieldName: action
              pattern: 'Teardown\s{{.word}}\sconnection'
            - fieldName: log.connectionId
              pattern: '({{.data}})for'
            - fieldName: log.srcInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: from.port
              pattern: '{{.integer}}'
            - fieldName: log.tmpFwUserFrom
              pattern: '({{.data}})?to'
            - fieldName: log.dstInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: to.port
              pattern: '{{.integer}}'
            - fieldName: log.tmpFwUserTo
              pattern: '({{.data}})?duration'
            - fieldName: log.duration
              pattern: '{{.time}}'
            - fieldName: log.irrelevant
              pattern: 'bytes'
            - fieldName: from.bytesSent
              pattern: '{{.integer}}'
            - fieldName: log.reason
              pattern: '{{.greedy}}'
          source: log.msg
      # Protocol
      - grok:
        patterns:
          - fieldName: log.irrelevant
            pattern: 'Teardown'
          - fieldName: protocol
            pattern: '{{.word}}'
          - fieldName: log.irrelevant
            pattern: '{{.greedy}}'
        source: action
      # Decoding outside and inside firewall user, and sg_info
      # Side from
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.firewallUserFrom
              pattern: '{{.data}}(\s)?,'
            - fieldName: log.outsideSgInfo
              pattern: '{{.data}}\)'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.tmpFwUserFrom
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.firewallUserFrom
              pattern: '{{.data}}\)'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.tmpFwUserFrom
      # Side to
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.firewallUserTo
              pattern: '{{.data}}(\s)?,'
            - fieldName: log.insideSgInfo
              pattern: '{{.data}}\)'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.tmpFwUserTo
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.firewallUserTo
              pattern: '{{.data}}\)'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.tmpFwUserTo
      # Parsing from.user from log.reason field
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '{{.data}}\('
            - fieldName: from.user
              pattern: '{{.data}}\)'
          source: log.reason
      - trim:
          function: suffix
          substring: ')'
          fields:
            - log.firewallUserFrom
            - log.firewallUserTo
            - from.user
      # Removing tmp fields
      - delete:
          fields:
            - log.tmpFwUserFrom
            - log.tmpFwUserTo
      # Cleaning fields
      - trim:
          function: suffix
          substring: ':'
          fields:
            - log.srcInterface
            - log.dstInterface
      - trim:
          function: suffix
          substring: '/'
          fields:
            - from.ip
            - to.ip
      - trim:
          function: suffix
          substring: 'for'
          fields:
            - log.connectionId
      - trim:
          function: suffix
          substring: ','
          fields:
            - log.firewallUserFrom
            - log.firewallUserTo
      #......................................................................#
      # ASA-6-302303
      - grok:
          patterns:
            - fieldName: action
              pattern: 'Built\s{{.word}}\sstate-bypass\sconnection'
            - fieldName: log.connectionId
              pattern: '({{.data}})from'
            - fieldName: log.srcInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: from.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.mappedIpFrom
              pattern: '{{.data}}/'
            - fieldName: log.mappedPortFrom
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '\)'
            - fieldName: log.irrelevant
              pattern: 'to'
            - fieldName: log.dstInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: to.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.mappedIpTo
              pattern: '{{.data}}/'
            - fieldName: log.mappedPortTo
              pattern: '{{.integer}}'
            - fieldName: log.rest
              pattern: '{{.greedy}}'
          source: log.msg
      # Protocol
      - grok:
        patterns:
          - fieldName: log.irrelevant
            pattern: 'Built'
          - fieldName: protocol
            pattern: '{{.word}}'
          - fieldName: log.irrelevant
            pattern: '{{.greedy}}'
        source: action
      # Cleaning fields
      - trim:
          function: suffix
          substring: ':'
          fields:
            - log.srcInterface
            - log.dstInterface
      - trim:
          function: suffix
          substring: '/'
          fields:
            - from.ip
            - to.ip
            - log.mappedIpFrom
            - log.mappedIpTo
      - trim:
          function: suffix
          substring: 'from'
          fields:
            - log.connectionId
      #......................................................................#
      # ASA-6-302304
      - grok:
          patterns:
            - fieldName: action
              pattern: 'Teardown\s{{.word}}\sstate-bypass\sconnection'
            - fieldName: log.connectionId
              pattern: '({{.data}})from'
            - fieldName: log.srcInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: from.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: 'to'
            - fieldName: log.dstInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: to.port
              pattern: '{{.integer}}'
            - fieldName: log.duration
              pattern: '{{.time}}'
            - fieldName: log.irrelevant
              pattern: ','
            - fieldName: from.bytesSent
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: ','
            - fieldName: log.reason
              pattern: '{{.greedy}}'
          source: log.msg
      # Protocol
      - grok:
        patterns:
          - fieldName: log.irrelevant
            pattern: 'Built'
          - fieldName: protocol
            pattern: '{{.word}}'
          - fieldName: log.irrelevant
            pattern: '{{.greedy}}'
        source: action
      # Cleaning fields
      - trim:
          function: suffix
          substring: ':'
          fields:
            - log.srcInterface
            - log.dstInterface
      - trim:
          function: suffix
          substring: '/'
          fields:
            - from.ip
            - to.ip
      - trim:
          function: suffix
          substring: 'from'
          fields:
            - log.connectionId
      #......................................................................#
      # ASA-6-302305
      - grok:
          patterns:
            - fieldName: action
              pattern: 'Built\s{{.word}}\sstate-bypass\sconnection'
            - fieldName: log.connectionId
              pattern: '({{.data}})for'
            - fieldName: log.srcInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: from.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.mappedIpFrom
              pattern: '{{.data}}/'
            - fieldName: log.mappedPortFrom
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '\)'
            - fieldName: log.tmpFwUserFrom
              pattern: '({{.data}})?to'
            - fieldName: log.dstInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: to.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.mappedIpTo
              pattern: '{{.data}}/'
            - fieldName: log.rest
              pattern: '{{.greedy}}'  
          source: log.msg
      # Protocol
      - grok:
        patterns:
          - fieldName: log.irrelevant
            pattern: 'Built'
          - fieldName: protocol
            pattern: '{{.word}}'
          - fieldName: log.irrelevant
            pattern: '{{.greedy}}'
        source: action
      # Parsing firewall user from
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.firewallUserFrom
              pattern: '{{.data}}\)'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.tmpFwUserFrom
      # Parsing port to, firewall user to, and, from user
      - grok:
          patterns:
            - fieldName: log.mappedPortTo
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '\)'
            - fieldName: log.tmpFwUserTo
              pattern: '{{.greedy}}'
          source: log.rest
      # Without user info
      - grok:
          patterns:
            - fieldName: log.mappedPortTo
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '\)'
          source: log.rest
      # Parsing firewall user to
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.firewallUserTo
              pattern: '{{.data}}\)'
          source: log.tmpFwUserTo
      
      # Decoding outside and inside sg_info
      - grok:
          patterns:
            - fieldName: log.firewallUserFrom
              pattern: '{{.data}}(\s)?,'
            - fieldName: log.outsideSgInfo
              pattern: '{{.data}}\)'
          source: log.firewallUserFrom
      - grok:
          patterns:
            - fieldName: log.firewallUserTo
              pattern: '{{.data}}(\s)?,'
            - fieldName: log.insideSgInfo
              pattern: '{{.data}}\)'
          source: log.firewallUserTo
      - trim:
          function: suffix
          substring: ')'
          fields:
            - log.firewallUserFrom
            - log.firewallUserTo
            - from.user
            - log.insideSgInfo
            - log.outsideSgInfo
      # Removing tmp fields
      - delete:
          fields:
            - log.tmpFwUserFrom
            - log.tmpFwUserTo

      # Cleaning fields
      - trim:
          function: suffix
          substring: ':'
          fields:
            - log.srcInterface
            - log.dstInterface
      - trim:
          function: suffix
          substring: '/'
          fields:
            - from.ip
            - to.ip
            - log.mappedIpFrom
            - log.mappedIpTo
      - trim:
          function: suffix
          substring: 'for'
          fields:
            - log.connectionId
      - trim:
          function: suffix
          substring: ','
          fields:
            - log.firewallUserFrom
            - log.firewallUserTo
      #......................................................................#
      # Common field conversions
      - cast:
          fields:
            - from.port
            - to.port
          to: int
      # Removing unused fields
      - delete:
          fields:
            - log.asaHeader
            - log.ciscoSeparator
            - log.irrelevant
            - log.syslogPri
            - log.rest
