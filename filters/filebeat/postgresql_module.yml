# PostgreSql module filter, version 3.0.0
# Filter Input requirements -> fileset: datatype
#                              log: plain text
# Compatible any kind of PostgreSql logs 
# Documentations
# 1- https://www.postgresql.org/docs/
# 2- https://www.elastic.co/guide/en/beats/filebeat/7.13/exported-fields-postgresql.html
# Implementation
# 1. Parsing the json from beats
# 2. Parsing the message field containing the apache log
pipeline:
  - dataTypes:
      - postgresql
    steps:
      - json:
          source: raw
      - rename:
          from:
            - log.log.file.path
          to: local.file
      - rename:
          from:
            - log.host.ip
          to: local.ips
      - rename:
          from:
            - log.host.mac
          to: local.macs
      - rename:
          from:
            - log.host.hostname
          to: local.host
      - rename:
          from:
            - log.event.dataset
          to: action
      - rename:
          from:
            - log.agent.version
          to: log.agentVersion
      - rename:
          from:
            - log.host.os.kernel
          to: log.osVersion
      - rename:
          from:
            - log.host.os.type
          to: log.osType
      - rename:
          from:
            - log.host.architecture
          to: log.cpuArchitecture
      # Fields conversions
      - cast:
          to: '[]string'
          fields:
            - local.ips
      - cast:
          to: '[]string'
          fields:
            - local.macs
      # Common postgresql log parsing
      # Example Log 
      # Mar 24 14:58:08 webappsecure postgres[7694]: [10-2] 42701 530b5e00.1e0e STATEMENT: ALTER TABLE sessiongroup ADD COLUMN requests bigint    
      - grok:
          patterns:
            - fieldName: deviceTime
              pattern: '(?:[Jj]an(?:uary|uar)?|[Ff]eb(?:ruary|ruar)?|[Mm](?:a|Ã¤)?r(?:ch|z)?|[Aa]pr(?:il)?|[Mm]a(?:y|i)?|[Jj]un(?:e|i)?|[Jj]ul(?:y|i)?|[Aa]ug(?:ust)?|[Ss]ep(?:tember)?|[Oo](?:c|k)?t(?:ober)?|[Nn]ov(?:ember)?|[Dd]e(?:c|z)(?:ember)?)\s(?:(?:0[1-9])|(?:[12][0-9])|(?:3[01])|[1-9])\s(([01][0-9])|2[0-4])(:[0-5][0-9])(:(?:[0-5]?[0-9]|60)(?:[:.,][0-9]+)?)'
            - fieldName: from.host
              pattern: '{{.word}}'
            - fieldName: from.process
              pattern: '{{.word}}'
            - fieldName: log.processId
              pattern: '((\[\d+\]:)?)'
            - fieldName: log.messageNumber
              pattern: '((\[)(\d+)-(\d+)(\]))'
            - fieldName: log.error
              pattern: '((\d+)?)'
            - fieldName: log.sessionId
              pattern: '(([0-9a-f]{8}\.[0-9a-f]{4})?)'
            - fieldName: actionResult
              pattern: '{{.greedy}}' 
          source: log.message
      # Common postgresql log parsing
      # Example Log 
      # 2022-02-15 19:43:52.364 UTC [25] LOG:  database system was shut down at 2022-02-11 20:01:30 UTC
      - grok:
          patterns:
            - fieldName: deviceTime
              pattern: '(\d{4}(-\d{2}){2})\s(\d{2}(:\d{2}){2}\.\d{3})(\s(UTC)?)'
            - fieldName: log.processId
              pattern: '((\[\d+\])?)'
            - fieldName: actionResult
              pattern: '{{.greedy}}' 
          source: log.message
      # Removing unused caracters
      - trim:
          function: prefix
          substring: '['
          fields:
            - log.messageNumber
            - log.processId
      - trim:
          function: suffix
          substring: ':'
          fields:
            - log.processId
      - trim:
          function: suffix
          substring: ']'
          fields:
            - log.messageNumber
            - log.processId
      # Removing unused fields
      - delete:
          fields:
            - log.service
            - log.metadata
            - log.agent
            - log.host
            - log.event
            - log.ecs
            - log.log