<?xml version="1.0" encoding="utf-8"?>
<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd">

    <changeSet id="20240326001" author="Manuel">
        <createProcedure dbms="postgresql">
        <![CDATA[
            CREATE
            OR REPLACE FUNCTION public.register_integration_pfsense(srv_id integer)
    RETURNS void
    LANGUAGE plpgsql
AS
            $function$
            declare
            grp_id integer;
    mod_id
            bigint;

            begin
            INSERT INTO utm_module (pretty_name, module_description, module_active, module_icon, module_name,
                                    server_id, module_category, needs_restart, lite_version, is_activatable)
            VALUES ('PfSense',
                    'PfSense is a free and open-source firewall and router that also features unified threat management load balancing, multi-WAN and more.',
                    FALSE,
                    'pfsense.svg',
                    'PFSENSE',
                    srv_id,
                    'DEVICE',
                    FALSE,
                    TRUE,
                    TRUE)
                ON CONFLICT (module_name, server_id) DO UPDATE SET pretty_name        = 'Pfsense',
                                                            module_icon        = 'pfsense.svg',
                                                            module_name        = 'PFSENSE',
                                                            module_category    = 'DEVICE',
                                                            module_description = 'PfSense is a free and open-source firewall and router that also features unified threat management load balancing, multi-WAN and more.',
                                                            lite_version       = TRUE,
                                                            server_id          = srv_id;

            end;

            $function$;
            ]]>
        </createProcedure>

        <createProcedure dbms="postgresql">
            <![CDATA[
            create or replace function register_integrations(srv_id integer, srv_type character varying) returns void
                language plpgsql
as
$$

            BEGIN

    perform public.register_integration_netflow(srv_id);

    perform public.register_integration_window_agent(srv_id);

    perform public.register_integration_syslog(srv_id);

    perform public.register_integration_linux_logs(srv_id);

    perform public.register_integration_vmware(srv_id);

    perform public.register_integration_linux_agent(srv_id);

    perform public.register_integration_apache(srv_id);

    perform public.register_integration_linux_audit_demon(srv_id);

    perform public.register_integration_elasticsearch(srv_id);

    perform public.register_integration_hap(srv_id);

    perform public.register_integration_kafka(srv_id);

    perform public.register_integration_kibana(srv_id);

    perform public.register_integration_logstash(srv_id);

    perform public.register_integration_mongodb(srv_id);

    perform public.register_integration_mysql(srv_id);

    perform public.register_integration_nats(srv_id);

    perform public.register_integration_nginx(srv_id);

    perform public.register_integration_osquery(srv_id);

    perform public.register_integration_postgresql(srv_id);

    perform public.register_integration_redis(srv_id);

    perform public.register_integration_traefik(srv_id);

    perform public.register_integration_cisco(srv_id);

    perform public.register_integration_cisco_meraki(srv_id);

    perform public.register_integration_json(srv_id);

    perform public.register_integration_iis(srv_id);

    perform public.register_integration_kaspersky(srv_id);

  perform public.register_integration_eset(srv_id);

    perform public.register_integration_sentinel_one(srv_id);

    perform public.register_integration_fortigate(srv_id);

    perform public.register_integration_sophosxg(srv_id);

    perform public.register_integration_macos(srv_id);


    IF srv_type = 'aio' THEN

        perform public.register_integration_file_integrity(srv_id);

        perform public.register_integration_azure(srv_id);

        perform public.register_integration_o365(srv_id);

        perform public.register_integration_aws(srv_id);

        perform public.register_integration_sophos_central(srv_id);

        perform public.register_integration_gcp(srv_id);

         perform public.register_integration_fire_power(srv_id);

        perform public.register_integration_ufw(srv_id);

        perform public.register_integration_mikrotik(srv_id);

        perform public.register_integration_palo_alto(srv_id);

        perform public.register_integration_cisco_switch(srv_id);

        perform public.register_integration_sonic_wall(srv_id);

        perform public.register_integration_deceptive_bytes(srv_id);

        perform public.register_integration_github(srv_id);

        perform public.register_integration_bitdefender(srv_id);

        perform public.register_integration_soc_ai(srv_id);

        perform public.register_integration_pfsense(srv_id);

            END IF;

    perform public.update_module_dependencies();
            END;
$$;

            alter function register_integrations(integer, varchar) owner to postgres;


            ]]>
        </createProcedure>
        <createProcedure dbms="postgresql">
            do $$
            begin
            perform public.execute_register_integration_function();
            end;
            $$ language plpgsql;
        </createProcedure>
    </changeSet>
</databaseChangeLog>
