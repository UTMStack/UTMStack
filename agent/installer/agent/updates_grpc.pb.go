// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: updates.proto

package agent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UpdatesServiceClient is the client API for UpdatesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpdatesServiceClient interface {
	CheckAgentUpdates(ctx context.Context, in *UpdateAgentRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	CheckCollectorUpdates(ctx context.Context, in *UpdateCollectorRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
}

type updatesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUpdatesServiceClient(cc grpc.ClientConnInterface) UpdatesServiceClient {
	return &updatesServiceClient{cc}
}

func (c *updatesServiceClient) CheckAgentUpdates(ctx context.Context, in *UpdateAgentRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/agent.UpdatesService/CheckAgentUpdates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updatesServiceClient) CheckCollectorUpdates(ctx context.Context, in *UpdateCollectorRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/agent.UpdatesService/CheckCollectorUpdates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpdatesServiceServer is the server API for UpdatesService service.
// All implementations must embed UnimplementedUpdatesServiceServer
// for forward compatibility
type UpdatesServiceServer interface {
	CheckAgentUpdates(context.Context, *UpdateAgentRequest) (*UpdateResponse, error)
	CheckCollectorUpdates(context.Context, *UpdateCollectorRequest) (*UpdateResponse, error)
	mustEmbedUnimplementedUpdatesServiceServer()
}

// UnimplementedUpdatesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUpdatesServiceServer struct {
}

func (UnimplementedUpdatesServiceServer) CheckAgentUpdates(context.Context, *UpdateAgentRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAgentUpdates not implemented")
}
func (UnimplementedUpdatesServiceServer) CheckCollectorUpdates(context.Context, *UpdateCollectorRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCollectorUpdates not implemented")
}
func (UnimplementedUpdatesServiceServer) mustEmbedUnimplementedUpdatesServiceServer() {}

// UnsafeUpdatesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpdatesServiceServer will
// result in compilation errors.
type UnsafeUpdatesServiceServer interface {
	mustEmbedUnimplementedUpdatesServiceServer()
}

func RegisterUpdatesServiceServer(s grpc.ServiceRegistrar, srv UpdatesServiceServer) {
	s.RegisterService(&UpdatesService_ServiceDesc, srv)
}

func _UpdatesService_CheckAgentUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdatesServiceServer).CheckAgentUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.UpdatesService/CheckAgentUpdates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdatesServiceServer).CheckAgentUpdates(ctx, req.(*UpdateAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdatesService_CheckCollectorUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCollectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdatesServiceServer).CheckCollectorUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.UpdatesService/CheckCollectorUpdates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdatesServiceServer).CheckCollectorUpdates(ctx, req.(*UpdateCollectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UpdatesService_ServiceDesc is the grpc.ServiceDesc for UpdatesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UpdatesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent.UpdatesService",
	HandlerType: (*UpdatesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckAgentUpdates",
			Handler:    _UpdatesService_CheckAgentUpdates_Handler,
		},
		{
			MethodName: "CheckCollectorUpdates",
			Handler:    _UpdatesService_CheckCollectorUpdates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "updates.proto",
}
